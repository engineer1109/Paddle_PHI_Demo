// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trainer_desc.proto

#ifndef PROTOBUF_trainer_5fdesc_2eproto__INCLUDED
#define PROTOBUF_trainer_5fdesc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
#include "data_feed.pb.h"
#include "framework.pb.h"
// @@protoc_insertion_point(includes)

namespace paddle {
namespace framework {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_trainer_5fdesc_2eproto();
void protobuf_InitDefaults_trainer_5fdesc_2eproto();
void protobuf_AssignDesc_trainer_5fdesc_2eproto();
void protobuf_ShutdownFile_trainer_5fdesc_2eproto();

class AdjustInsWeightConfig;
class CondTableMap;
class CopyTableConfig;
class DownpourWorkerParameter;
class FetchConfig;
class HeterSectionWorkerParameter;
class HogwildWorkerParameter;
class ProgramConfig;
class PullDenseWorkerParameter;
class SectionConfig;
class SectionWorkerParameter;
class TableDependencyMap;
class TableParameter;
class TrainerDesc;

enum SectionConfig_Place {
  SectionConfig_Place_CPUPlace = 0,
  SectionConfig_Place_CUDAPlace = 1,
  SectionConfig_Place_CUDAPinnedPlace = 2
};
bool SectionConfig_Place_IsValid(int value);
const SectionConfig_Place SectionConfig_Place_Place_MIN = SectionConfig_Place_CPUPlace;
const SectionConfig_Place SectionConfig_Place_Place_MAX = SectionConfig_Place_CUDAPinnedPlace;
const int SectionConfig_Place_Place_ARRAYSIZE = SectionConfig_Place_Place_MAX + 1;

enum FetchConfig_Method {
  FetchConfig_Method_PRINT = 0
};
bool FetchConfig_Method_IsValid(int value);
const FetchConfig_Method FetchConfig_Method_Method_MIN = FetchConfig_Method_PRINT;
const FetchConfig_Method FetchConfig_Method_Method_MAX = FetchConfig_Method_PRINT;
const int FetchConfig_Method_Method_ARRAYSIZE = FetchConfig_Method_Method_MAX + 1;

// ===================================================================

class TrainerDesc : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:paddle.framework.TrainerDesc) */ {
 public:
  TrainerDesc();
  virtual ~TrainerDesc();

  TrainerDesc(const TrainerDesc& from);

  inline TrainerDesc& operator=(const TrainerDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const TrainerDesc& default_instance();

  static const TrainerDesc* internal_default_instance();

  void Swap(TrainerDesc* other);

  // implements Message ----------------------------------------------

  inline TrainerDesc* New() const { return New(NULL); }

  TrainerDesc* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TrainerDesc& from);
  void MergeFrom(const TrainerDesc& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrainerDesc* other);
  void UnsafeMergeFrom(const TrainerDesc& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string class_name = 1;
  bool has_class_name() const;
  void clear_class_name();
  static const int kClassNameFieldNumber = 1;
  const ::std::string& class_name() const;
  void set_class_name(const ::std::string& value);
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  ::std::string* mutable_class_name();
  ::std::string* release_class_name();
  void set_allocated_class_name(::std::string* class_name);

  // optional string device_worker_name = 2;
  bool has_device_worker_name() const;
  void clear_device_worker_name();
  static const int kDeviceWorkerNameFieldNumber = 2;
  const ::std::string& device_worker_name() const;
  void set_device_worker_name(const ::std::string& value);
  void set_device_worker_name(const char* value);
  void set_device_worker_name(const char* value, size_t size);
  ::std::string* mutable_device_worker_name();
  ::std::string* release_device_worker_name();
  void set_allocated_device_worker_name(::std::string* device_worker_name);

  // optional int32 thread_num = 3;
  bool has_thread_num() const;
  void clear_thread_num();
  static const int kThreadNumFieldNumber = 3;
  ::google::protobuf::int32 thread_num() const;
  void set_thread_num(::google::protobuf::int32 value);

  // optional bool binding_cpu = 4 [default = false];
  bool has_binding_cpu() const;
  void clear_binding_cpu();
  static const int kBindingCpuFieldNumber = 4;
  bool binding_cpu() const;
  void set_binding_cpu(bool value);

  // repeated string filelist = 5;
  int filelist_size() const;
  void clear_filelist();
  static const int kFilelistFieldNumber = 5;
  const ::std::string& filelist(int index) const;
  ::std::string* mutable_filelist(int index);
  void set_filelist(int index, const ::std::string& value);
  void set_filelist(int index, const char* value);
  void set_filelist(int index, const char* value, size_t size);
  ::std::string* add_filelist();
  void add_filelist(const ::std::string& value);
  void add_filelist(const char* value);
  void add_filelist(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& filelist() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_filelist();

  // optional bool debug = 6 [default = false];
  bool has_debug() const;
  void clear_debug();
  static const int kDebugFieldNumber = 6;
  bool debug() const;
  void set_debug(bool value);

  // optional .paddle.framework.FetchConfig fetch_config = 7;
  bool has_fetch_config() const;
  void clear_fetch_config();
  static const int kFetchConfigFieldNumber = 7;
  const ::paddle::framework::FetchConfig& fetch_config() const;
  ::paddle::framework::FetchConfig* mutable_fetch_config();
  ::paddle::framework::FetchConfig* release_fetch_config();
  void set_allocated_fetch_config(::paddle::framework::FetchConfig* fetch_config);

  // optional bool use_cvm = 8 [default = false];
  bool has_use_cvm() const;
  void clear_use_cvm();
  static const int kUseCvmFieldNumber = 8;
  bool use_cvm() const;
  void set_use_cvm(bool value);

  // optional bool dump_slot = 9 [default = false];
  bool has_dump_slot() const;
  void clear_dump_slot();
  static const int kDumpSlotFieldNumber = 9;
  bool dump_slot() const;
  void set_dump_slot(bool value);

  // optional float scale_datanorm = 10 [default = -1];
  bool has_scale_datanorm() const;
  void clear_scale_datanorm();
  static const int kScaleDatanormFieldNumber = 10;
  float scale_datanorm() const;
  void set_scale_datanorm(float value);

  // optional int32 mpi_rank = 11 [default = -1];
  bool has_mpi_rank() const;
  void clear_mpi_rank();
  static const int kMpiRankFieldNumber = 11;
  ::google::protobuf::int32 mpi_rank() const;
  void set_mpi_rank(::google::protobuf::int32 value);

  // optional string dump_fields_path = 12;
  bool has_dump_fields_path() const;
  void clear_dump_fields_path();
  static const int kDumpFieldsPathFieldNumber = 12;
  const ::std::string& dump_fields_path() const;
  void set_dump_fields_path(const ::std::string& value);
  void set_dump_fields_path(const char* value);
  void set_dump_fields_path(const char* value, size_t size);
  ::std::string* mutable_dump_fields_path();
  ::std::string* release_dump_fields_path();
  void set_allocated_dump_fields_path(::std::string* dump_fields_path);

  // repeated string dump_fields = 13;
  int dump_fields_size() const;
  void clear_dump_fields();
  static const int kDumpFieldsFieldNumber = 13;
  const ::std::string& dump_fields(int index) const;
  ::std::string* mutable_dump_fields(int index);
  void set_dump_fields(int index, const ::std::string& value);
  void set_dump_fields(int index, const char* value);
  void set_dump_fields(int index, const char* value, size_t size);
  ::std::string* add_dump_fields();
  void add_dump_fields(const ::std::string& value);
  void add_dump_fields(const char* value);
  void add_dump_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& dump_fields() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dump_fields();

  // optional string dump_converter = 14;
  bool has_dump_converter() const;
  void clear_dump_converter();
  static const int kDumpConverterFieldNumber = 14;
  const ::std::string& dump_converter() const;
  void set_dump_converter(const ::std::string& value);
  void set_dump_converter(const char* value);
  void set_dump_converter(const char* value, size_t size);
  ::std::string* mutable_dump_converter();
  ::std::string* release_dump_converter();
  void set_allocated_dump_converter(::std::string* dump_converter);

  // repeated string dump_param = 15;
  int dump_param_size() const;
  void clear_dump_param();
  static const int kDumpParamFieldNumber = 15;
  const ::std::string& dump_param(int index) const;
  ::std::string* mutable_dump_param(int index);
  void set_dump_param(int index, const ::std::string& value);
  void set_dump_param(int index, const char* value);
  void set_dump_param(int index, const char* value, size_t size);
  ::std::string* add_dump_param();
  void add_dump_param(const ::std::string& value);
  void add_dump_param(const char* value);
  void add_dump_param(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& dump_param() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dump_param();

  // optional int32 mpi_size = 16 [default = -1];
  bool has_mpi_size() const;
  void clear_mpi_size();
  static const int kMpiSizeFieldNumber = 16;
  ::google::protobuf::int32 mpi_size() const;
  void set_mpi_size(::google::protobuf::int32 value);

  // optional int32 dump_file_num = 17 [default = 16];
  bool has_dump_file_num() const;
  void clear_dump_file_num();
  static const int kDumpFileNumFieldNumber = 17;
  ::google::protobuf::int32 dump_file_num() const;
  void set_dump_file_num(::google::protobuf::int32 value);

  // repeated string check_nan_var_names = 18;
  int check_nan_var_names_size() const;
  void clear_check_nan_var_names();
  static const int kCheckNanVarNamesFieldNumber = 18;
  const ::std::string& check_nan_var_names(int index) const;
  ::std::string* mutable_check_nan_var_names(int index);
  void set_check_nan_var_names(int index, const ::std::string& value);
  void set_check_nan_var_names(int index, const char* value);
  void set_check_nan_var_names(int index, const char* value, size_t size);
  ::std::string* add_check_nan_var_names();
  void add_check_nan_var_names(const ::std::string& value);
  void add_check_nan_var_names(const char* value);
  void add_check_nan_var_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& check_nan_var_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_check_nan_var_names();

  // optional .paddle.framework.CopyTableConfig copy_table_config = 19;
  bool has_copy_table_config() const;
  void clear_copy_table_config();
  static const int kCopyTableConfigFieldNumber = 19;
  const ::paddle::framework::CopyTableConfig& copy_table_config() const;
  ::paddle::framework::CopyTableConfig* mutable_copy_table_config();
  ::paddle::framework::CopyTableConfig* release_copy_table_config();
  void set_allocated_copy_table_config(::paddle::framework::CopyTableConfig* copy_table_config);

  // optional .paddle.framework.AdjustInsWeightConfig adjust_ins_weight_config = 20;
  bool has_adjust_ins_weight_config() const;
  void clear_adjust_ins_weight_config();
  static const int kAdjustInsWeightConfigFieldNumber = 20;
  const ::paddle::framework::AdjustInsWeightConfig& adjust_ins_weight_config() const;
  ::paddle::framework::AdjustInsWeightConfig* mutable_adjust_ins_weight_config();
  ::paddle::framework::AdjustInsWeightConfig* release_adjust_ins_weight_config();
  void set_allocated_adjust_ins_weight_config(::paddle::framework::AdjustInsWeightConfig* adjust_ins_weight_config);

  // optional bool no_cvm = 21 [default = false];
  bool has_no_cvm() const;
  void clear_no_cvm();
  static const int kNoCvmFieldNumber = 21;
  bool no_cvm() const;
  void set_no_cvm(bool value);

  // optional bool thread_barrier = 22;
  bool has_thread_barrier() const;
  void clear_thread_barrier();
  static const int kThreadBarrierFieldNumber = 22;
  bool thread_barrier() const;
  void set_thread_barrier(bool value);

  // repeated string loss_names = 23;
  int loss_names_size() const;
  void clear_loss_names();
  static const int kLossNamesFieldNumber = 23;
  const ::std::string& loss_names(int index) const;
  ::std::string* mutable_loss_names(int index);
  void set_loss_names(int index, const ::std::string& value);
  void set_loss_names(int index, const char* value);
  void set_loss_names(int index, const char* value, size_t size);
  ::std::string* add_loss_names();
  void add_loss_names(const ::std::string& value);
  void add_loss_names(const char* value);
  void add_loss_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& loss_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_loss_names();

  // optional bool enable_random_dump = 24 [default = false];
  bool has_enable_random_dump() const;
  void clear_enable_random_dump();
  static const int kEnableRandomDumpFieldNumber = 24;
  bool enable_random_dump() const;
  void set_enable_random_dump(bool value);

  // optional bool random_with_lineid = 25 [default = false];
  bool has_random_with_lineid() const;
  void clear_random_with_lineid();
  static const int kRandomWithLineidFieldNumber = 25;
  bool random_with_lineid() const;
  void set_random_with_lineid(bool value);

  // optional int32 dump_interval = 26 [default = 10000];
  bool has_dump_interval() const;
  void clear_dump_interval();
  static const int kDumpIntervalFieldNumber = 26;
  ::google::protobuf::int32 dump_interval() const;
  void set_dump_interval(::google::protobuf::int32 value);

  // repeated int32 worker_places = 27;
  int worker_places_size() const;
  void clear_worker_places();
  static const int kWorkerPlacesFieldNumber = 27;
  ::google::protobuf::int32 worker_places(int index) const;
  void set_worker_places(int index, ::google::protobuf::int32 value);
  void add_worker_places(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      worker_places() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_worker_places();

  // repeated string xpu_send_list = 28;
  int xpu_send_list_size() const;
  void clear_xpu_send_list();
  static const int kXpuSendListFieldNumber = 28;
  const ::std::string& xpu_send_list(int index) const;
  ::std::string* mutable_xpu_send_list(int index);
  void set_xpu_send_list(int index, const ::std::string& value);
  void set_xpu_send_list(int index, const char* value);
  void set_xpu_send_list(int index, const char* value, size_t size);
  ::std::string* add_xpu_send_list();
  void add_xpu_send_list(const ::std::string& value);
  void add_xpu_send_list(const char* value);
  void add_xpu_send_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& xpu_send_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_xpu_send_list();

  // repeated string xpu_recv_list = 29;
  int xpu_recv_list_size() const;
  void clear_xpu_recv_list();
  static const int kXpuRecvListFieldNumber = 29;
  const ::std::string& xpu_recv_list(int index) const;
  ::std::string* mutable_xpu_recv_list(int index);
  void set_xpu_recv_list(int index, const ::std::string& value);
  void set_xpu_recv_list(int index, const char* value);
  void set_xpu_recv_list(int index, const char* value, size_t size);
  ::std::string* add_xpu_recv_list();
  void add_xpu_recv_list(const ::std::string& value);
  void add_xpu_recv_list(const char* value);
  void add_xpu_recv_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& xpu_recv_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_xpu_recv_list();

  // optional int32 xpu_start_idx = 30;
  bool has_xpu_start_idx() const;
  void clear_xpu_start_idx();
  static const int kXpuStartIdxFieldNumber = 30;
  ::google::protobuf::int32 xpu_start_idx() const;
  void set_xpu_start_idx(::google::protobuf::int32 value);

  // optional int32 xpu_end_idx = 31;
  bool has_xpu_end_idx() const;
  void clear_xpu_end_idx();
  static const int kXpuEndIdxFieldNumber = 31;
  ::google::protobuf::int32 xpu_end_idx() const;
  void set_xpu_end_idx(::google::protobuf::int32 value);

  // optional bool use_ps_gpu = 32 [default = false];
  bool has_use_ps_gpu() const;
  void clear_use_ps_gpu();
  static const int kUsePsGpuFieldNumber = 32;
  bool use_ps_gpu() const;
  void set_use_ps_gpu(bool value);

  // optional string user_define_dump_filename = 33;
  bool has_user_define_dump_filename() const;
  void clear_user_define_dump_filename();
  static const int kUserDefineDumpFilenameFieldNumber = 33;
  const ::std::string& user_define_dump_filename() const;
  void set_user_define_dump_filename(const ::std::string& value);
  void set_user_define_dump_filename(const char* value);
  void set_user_define_dump_filename(const char* value, size_t size);
  ::std::string* mutable_user_define_dump_filename();
  ::std::string* release_user_define_dump_filename();
  void set_allocated_user_define_dump_filename(::std::string* user_define_dump_filename);

  // optional bool scale_sparse_gradient_with_batch_size = 34 [default = true];
  bool has_scale_sparse_gradient_with_batch_size() const;
  void clear_scale_sparse_gradient_with_batch_size();
  static const int kScaleSparseGradientWithBatchSizeFieldNumber = 34;
  bool scale_sparse_gradient_with_batch_size() const;
  void set_scale_sparse_gradient_with_batch_size(bool value);

  // repeated int32 trainers = 35;
  int trainers_size() const;
  void clear_trainers();
  static const int kTrainersFieldNumber = 35;
  ::google::protobuf::int32 trainers(int index) const;
  void set_trainers(int index, ::google::protobuf::int32 value);
  void add_trainers(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      trainers() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_trainers();

  // optional int32 trainer_id = 36;
  bool has_trainer_id() const;
  void clear_trainer_id();
  static const int kTrainerIdFieldNumber = 36;
  ::google::protobuf::int32 trainer_id() const;
  void set_trainer_id(::google::protobuf::int32 value);

  // optional string fleet_desc = 37;
  bool has_fleet_desc() const;
  void clear_fleet_desc();
  static const int kFleetDescFieldNumber = 37;
  const ::std::string& fleet_desc() const;
  void set_fleet_desc(const ::std::string& value);
  void set_fleet_desc(const char* value);
  void set_fleet_desc(const char* value, size_t size);
  ::std::string* mutable_fleet_desc();
  ::std::string* release_fleet_desc();
  void set_allocated_fleet_desc(::std::string* fleet_desc);

  // optional bool is_dump_in_simple_mode = 38 [default = false];
  bool has_is_dump_in_simple_mode() const;
  void clear_is_dump_in_simple_mode();
  static const int kIsDumpInSimpleModeFieldNumber = 38;
  bool is_dump_in_simple_mode() const;
  void set_is_dump_in_simple_mode(bool value);

  // optional .paddle.framework.HogwildWorkerParameter hogwild_param = 101;
  bool has_hogwild_param() const;
  void clear_hogwild_param();
  static const int kHogwildParamFieldNumber = 101;
  const ::paddle::framework::HogwildWorkerParameter& hogwild_param() const;
  ::paddle::framework::HogwildWorkerParameter* mutable_hogwild_param();
  ::paddle::framework::HogwildWorkerParameter* release_hogwild_param();
  void set_allocated_hogwild_param(::paddle::framework::HogwildWorkerParameter* hogwild_param);

  // optional .paddle.framework.DownpourWorkerParameter downpour_param = 103;
  bool has_downpour_param() const;
  void clear_downpour_param();
  static const int kDownpourParamFieldNumber = 103;
  const ::paddle::framework::DownpourWorkerParameter& downpour_param() const;
  ::paddle::framework::DownpourWorkerParameter* mutable_downpour_param();
  ::paddle::framework::DownpourWorkerParameter* release_downpour_param();
  void set_allocated_downpour_param(::paddle::framework::DownpourWorkerParameter* downpour_param);

  // optional .paddle.framework.PullDenseWorkerParameter pull_dense_param = 102;
  bool has_pull_dense_param() const;
  void clear_pull_dense_param();
  static const int kPullDenseParamFieldNumber = 102;
  const ::paddle::framework::PullDenseWorkerParameter& pull_dense_param() const;
  ::paddle::framework::PullDenseWorkerParameter* mutable_pull_dense_param();
  ::paddle::framework::PullDenseWorkerParameter* release_pull_dense_param();
  void set_allocated_pull_dense_param(::paddle::framework::PullDenseWorkerParameter* pull_dense_param);

  // optional .paddle.framework.SectionWorkerParameter section_param = 104;
  bool has_section_param() const;
  void clear_section_param();
  static const int kSectionParamFieldNumber = 104;
  const ::paddle::framework::SectionWorkerParameter& section_param() const;
  ::paddle::framework::SectionWorkerParameter* mutable_section_param();
  ::paddle::framework::SectionWorkerParameter* release_section_param();
  void set_allocated_section_param(::paddle::framework::SectionWorkerParameter* section_param);

  // optional .paddle.framework.HeterSectionWorkerParameter heter_section_param = 105;
  bool has_heter_section_param() const;
  void clear_heter_section_param();
  static const int kHeterSectionParamFieldNumber = 105;
  const ::paddle::framework::HeterSectionWorkerParameter& heter_section_param() const;
  ::paddle::framework::HeterSectionWorkerParameter* mutable_heter_section_param();
  ::paddle::framework::HeterSectionWorkerParameter* release_heter_section_param();
  void set_allocated_heter_section_param(::paddle::framework::HeterSectionWorkerParameter* heter_section_param);

  // optional .paddle.framework.DataFeedDesc data_desc = 201;
  bool has_data_desc() const;
  void clear_data_desc();
  static const int kDataDescFieldNumber = 201;
  const ::paddle::framework::DataFeedDesc& data_desc() const;
  ::paddle::framework::DataFeedDesc* mutable_data_desc();
  ::paddle::framework::DataFeedDesc* release_data_desc();
  void set_allocated_data_desc(::paddle::framework::DataFeedDesc* data_desc);

  // @@protoc_insertion_point(class_scope:paddle.framework.TrainerDesc)
 private:
  inline void set_has_class_name();
  inline void clear_has_class_name();
  inline void set_has_device_worker_name();
  inline void clear_has_device_worker_name();
  inline void set_has_thread_num();
  inline void clear_has_thread_num();
  inline void set_has_binding_cpu();
  inline void clear_has_binding_cpu();
  inline void set_has_debug();
  inline void clear_has_debug();
  inline void set_has_fetch_config();
  inline void clear_has_fetch_config();
  inline void set_has_use_cvm();
  inline void clear_has_use_cvm();
  inline void set_has_dump_slot();
  inline void clear_has_dump_slot();
  inline void set_has_scale_datanorm();
  inline void clear_has_scale_datanorm();
  inline void set_has_mpi_rank();
  inline void clear_has_mpi_rank();
  inline void set_has_dump_fields_path();
  inline void clear_has_dump_fields_path();
  inline void set_has_dump_converter();
  inline void clear_has_dump_converter();
  inline void set_has_mpi_size();
  inline void clear_has_mpi_size();
  inline void set_has_dump_file_num();
  inline void clear_has_dump_file_num();
  inline void set_has_copy_table_config();
  inline void clear_has_copy_table_config();
  inline void set_has_adjust_ins_weight_config();
  inline void clear_has_adjust_ins_weight_config();
  inline void set_has_no_cvm();
  inline void clear_has_no_cvm();
  inline void set_has_thread_barrier();
  inline void clear_has_thread_barrier();
  inline void set_has_enable_random_dump();
  inline void clear_has_enable_random_dump();
  inline void set_has_random_with_lineid();
  inline void clear_has_random_with_lineid();
  inline void set_has_dump_interval();
  inline void clear_has_dump_interval();
  inline void set_has_xpu_start_idx();
  inline void clear_has_xpu_start_idx();
  inline void set_has_xpu_end_idx();
  inline void clear_has_xpu_end_idx();
  inline void set_has_use_ps_gpu();
  inline void clear_has_use_ps_gpu();
  inline void set_has_user_define_dump_filename();
  inline void clear_has_user_define_dump_filename();
  inline void set_has_scale_sparse_gradient_with_batch_size();
  inline void clear_has_scale_sparse_gradient_with_batch_size();
  inline void set_has_trainer_id();
  inline void clear_has_trainer_id();
  inline void set_has_fleet_desc();
  inline void clear_has_fleet_desc();
  inline void set_has_is_dump_in_simple_mode();
  inline void clear_has_is_dump_in_simple_mode();
  inline void set_has_hogwild_param();
  inline void clear_has_hogwild_param();
  inline void set_has_downpour_param();
  inline void clear_has_downpour_param();
  inline void set_has_pull_dense_param();
  inline void clear_has_pull_dense_param();
  inline void set_has_section_param();
  inline void clear_has_section_param();
  inline void set_has_heter_section_param();
  inline void clear_has_heter_section_param();
  inline void set_has_data_desc();
  inline void clear_has_data_desc();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::std::string> filelist_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dump_fields_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dump_param_;
  ::google::protobuf::RepeatedPtrField< ::std::string> check_nan_var_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> loss_names_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > worker_places_;
  ::google::protobuf::RepeatedPtrField< ::std::string> xpu_send_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> xpu_recv_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > trainers_;
  ::google::protobuf::internal::ArenaStringPtr class_name_;
  ::google::protobuf::internal::ArenaStringPtr device_worker_name_;
  ::google::protobuf::internal::ArenaStringPtr dump_fields_path_;
  ::google::protobuf::internal::ArenaStringPtr dump_converter_;
  ::google::protobuf::internal::ArenaStringPtr user_define_dump_filename_;
  ::google::protobuf::internal::ArenaStringPtr fleet_desc_;
  ::paddle::framework::FetchConfig* fetch_config_;
  ::paddle::framework::CopyTableConfig* copy_table_config_;
  ::paddle::framework::AdjustInsWeightConfig* adjust_ins_weight_config_;
  ::paddle::framework::HogwildWorkerParameter* hogwild_param_;
  ::paddle::framework::DownpourWorkerParameter* downpour_param_;
  ::paddle::framework::PullDenseWorkerParameter* pull_dense_param_;
  ::paddle::framework::SectionWorkerParameter* section_param_;
  ::paddle::framework::HeterSectionWorkerParameter* heter_section_param_;
  ::paddle::framework::DataFeedDesc* data_desc_;
  ::google::protobuf::int32 thread_num_;
  bool binding_cpu_;
  bool debug_;
  bool use_cvm_;
  bool dump_slot_;
  bool no_cvm_;
  bool thread_barrier_;
  bool enable_random_dump_;
  bool random_with_lineid_;
  ::google::protobuf::int32 xpu_start_idx_;
  ::google::protobuf::int32 xpu_end_idx_;
  bool use_ps_gpu_;
  bool is_dump_in_simple_mode_;
  ::google::protobuf::int32 trainer_id_;
  float scale_datanorm_;
  ::google::protobuf::int32 mpi_rank_;
  ::google::protobuf::int32 mpi_size_;
  ::google::protobuf::int32 dump_file_num_;
  ::google::protobuf::int32 dump_interval_;
  bool scale_sparse_gradient_with_batch_size_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_trainer_5fdesc_2eproto_impl();
  friend void  protobuf_AddDesc_trainer_5fdesc_2eproto_impl();
  friend void protobuf_AssignDesc_trainer_5fdesc_2eproto();
  friend void protobuf_ShutdownFile_trainer_5fdesc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TrainerDesc> TrainerDesc_default_instance_;

// -------------------------------------------------------------------

class HogwildWorkerParameter : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:paddle.framework.HogwildWorkerParameter) */ {
 public:
  HogwildWorkerParameter();
  virtual ~HogwildWorkerParameter();

  HogwildWorkerParameter(const HogwildWorkerParameter& from);

  inline HogwildWorkerParameter& operator=(const HogwildWorkerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const HogwildWorkerParameter& default_instance();

  static const HogwildWorkerParameter* internal_default_instance();

  void Swap(HogwildWorkerParameter* other);

  // implements Message ----------------------------------------------

  inline HogwildWorkerParameter* New() const { return New(NULL); }

  HogwildWorkerParameter* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const HogwildWorkerParameter& from);
  void MergeFrom(const HogwildWorkerParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HogwildWorkerParameter* other);
  void UnsafeMergeFrom(const HogwildWorkerParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string skip_ops = 1;
  int skip_ops_size() const;
  void clear_skip_ops();
  static const int kSkipOpsFieldNumber = 1;
  const ::std::string& skip_ops(int index) const;
  ::std::string* mutable_skip_ops(int index);
  void set_skip_ops(int index, const ::std::string& value);
  void set_skip_ops(int index, const char* value);
  void set_skip_ops(int index, const char* value, size_t size);
  ::std::string* add_skip_ops();
  void add_skip_ops(const ::std::string& value);
  void add_skip_ops(const char* value);
  void add_skip_ops(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& skip_ops() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_skip_ops();

  // repeated string stat_var_names = 2;
  int stat_var_names_size() const;
  void clear_stat_var_names();
  static const int kStatVarNamesFieldNumber = 2;
  const ::std::string& stat_var_names(int index) const;
  ::std::string* mutable_stat_var_names(int index);
  void set_stat_var_names(int index, const ::std::string& value);
  void set_stat_var_names(int index, const char* value);
  void set_stat_var_names(int index, const char* value, size_t size);
  ::std::string* add_stat_var_names();
  void add_stat_var_names(const ::std::string& value);
  void add_stat_var_names(const char* value);
  void add_stat_var_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stat_var_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stat_var_names();

  // @@protoc_insertion_point(class_scope:paddle.framework.HogwildWorkerParameter)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> skip_ops_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stat_var_names_;
  friend void  protobuf_InitDefaults_trainer_5fdesc_2eproto_impl();
  friend void  protobuf_AddDesc_trainer_5fdesc_2eproto_impl();
  friend void protobuf_AssignDesc_trainer_5fdesc_2eproto();
  friend void protobuf_ShutdownFile_trainer_5fdesc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<HogwildWorkerParameter> HogwildWorkerParameter_default_instance_;

// -------------------------------------------------------------------

class DownpourWorkerParameter : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:paddle.framework.DownpourWorkerParameter) */ {
 public:
  DownpourWorkerParameter();
  virtual ~DownpourWorkerParameter();

  DownpourWorkerParameter(const DownpourWorkerParameter& from);

  inline DownpourWorkerParameter& operator=(const DownpourWorkerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const DownpourWorkerParameter& default_instance();

  static const DownpourWorkerParameter* internal_default_instance();

  void Swap(DownpourWorkerParameter* other);

  // implements Message ----------------------------------------------

  inline DownpourWorkerParameter* New() const { return New(NULL); }

  DownpourWorkerParameter* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DownpourWorkerParameter& from);
  void MergeFrom(const DownpourWorkerParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DownpourWorkerParameter* other);
  void UnsafeMergeFrom(const DownpourWorkerParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .paddle.framework.TableParameter sparse_table = 1;
  int sparse_table_size() const;
  void clear_sparse_table();
  static const int kSparseTableFieldNumber = 1;
  const ::paddle::framework::TableParameter& sparse_table(int index) const;
  ::paddle::framework::TableParameter* mutable_sparse_table(int index);
  ::paddle::framework::TableParameter* add_sparse_table();
  ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableParameter >*
      mutable_sparse_table();
  const ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableParameter >&
      sparse_table() const;

  // repeated .paddle.framework.TableParameter dense_table = 2;
  int dense_table_size() const;
  void clear_dense_table();
  static const int kDenseTableFieldNumber = 2;
  const ::paddle::framework::TableParameter& dense_table(int index) const;
  ::paddle::framework::TableParameter* mutable_dense_table(int index);
  ::paddle::framework::TableParameter* add_dense_table();
  ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableParameter >*
      mutable_dense_table();
  const ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableParameter >&
      dense_table() const;

  // repeated string skip_ops = 3;
  int skip_ops_size() const;
  void clear_skip_ops();
  static const int kSkipOpsFieldNumber = 3;
  const ::std::string& skip_ops(int index) const;
  ::std::string* mutable_skip_ops(int index);
  void set_skip_ops(int index, const ::std::string& value);
  void set_skip_ops(int index, const char* value);
  void set_skip_ops(int index, const char* value, size_t size);
  ::std::string* add_skip_ops();
  void add_skip_ops(const ::std::string& value);
  void add_skip_ops(const char* value);
  void add_skip_ops(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& skip_ops() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_skip_ops();

  // repeated .paddle.framework.ProgramConfig program_config = 4;
  int program_config_size() const;
  void clear_program_config();
  static const int kProgramConfigFieldNumber = 4;
  const ::paddle::framework::ProgramConfig& program_config(int index) const;
  ::paddle::framework::ProgramConfig* mutable_program_config(int index);
  ::paddle::framework::ProgramConfig* add_program_config();
  ::google::protobuf::RepeatedPtrField< ::paddle::framework::ProgramConfig >*
      mutable_program_config();
  const ::google::protobuf::RepeatedPtrField< ::paddle::framework::ProgramConfig >&
      program_config() const;

  // optional bool push_sparse = 5 [default = true];
  bool has_push_sparse() const;
  void clear_push_sparse();
  static const int kPushSparseFieldNumber = 5;
  bool push_sparse() const;
  void set_push_sparse(bool value);

  // optional bool push_dense = 6 [default = true];
  bool has_push_dense() const;
  void clear_push_dense();
  static const int kPushDenseFieldNumber = 6;
  bool push_dense() const;
  void set_push_dense(bool value);

  // repeated string stat_var_names = 7;
  int stat_var_names_size() const;
  void clear_stat_var_names();
  static const int kStatVarNamesFieldNumber = 7;
  const ::std::string& stat_var_names(int index) const;
  ::std::string* mutable_stat_var_names(int index);
  void set_stat_var_names(int index, const ::std::string& value);
  void set_stat_var_names(int index, const char* value);
  void set_stat_var_names(int index, const char* value, size_t size);
  ::std::string* add_stat_var_names();
  void add_stat_var_names(const ::std::string& value);
  void add_stat_var_names(const char* value);
  void add_stat_var_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stat_var_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stat_var_names();

  // @@protoc_insertion_point(class_scope:paddle.framework.DownpourWorkerParameter)
 private:
  inline void set_has_push_sparse();
  inline void clear_has_push_sparse();
  inline void set_has_push_dense();
  inline void clear_has_push_dense();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableParameter > sparse_table_;
  ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableParameter > dense_table_;
  ::google::protobuf::RepeatedPtrField< ::std::string> skip_ops_;
  ::google::protobuf::RepeatedPtrField< ::paddle::framework::ProgramConfig > program_config_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stat_var_names_;
  bool push_sparse_;
  bool push_dense_;
  friend void  protobuf_InitDefaults_trainer_5fdesc_2eproto_impl();
  friend void  protobuf_AddDesc_trainer_5fdesc_2eproto_impl();
  friend void protobuf_AssignDesc_trainer_5fdesc_2eproto();
  friend void protobuf_ShutdownFile_trainer_5fdesc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DownpourWorkerParameter> DownpourWorkerParameter_default_instance_;

// -------------------------------------------------------------------

class SectionWorkerParameter : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:paddle.framework.SectionWorkerParameter) */ {
 public:
  SectionWorkerParameter();
  virtual ~SectionWorkerParameter();

  SectionWorkerParameter(const SectionWorkerParameter& from);

  inline SectionWorkerParameter& operator=(const SectionWorkerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const SectionWorkerParameter& default_instance();

  static const SectionWorkerParameter* internal_default_instance();

  void Swap(SectionWorkerParameter* other);

  // implements Message ----------------------------------------------

  inline SectionWorkerParameter* New() const { return New(NULL); }

  SectionWorkerParameter* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SectionWorkerParameter& from);
  void MergeFrom(const SectionWorkerParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SectionWorkerParameter* other);
  void UnsafeMergeFrom(const SectionWorkerParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .paddle.framework.SectionConfig section_config = 1;
  bool has_section_config() const;
  void clear_section_config();
  static const int kSectionConfigFieldNumber = 1;
  const ::paddle::framework::SectionConfig& section_config() const;
  ::paddle::framework::SectionConfig* mutable_section_config();
  ::paddle::framework::SectionConfig* release_section_config();
  void set_allocated_section_config(::paddle::framework::SectionConfig* section_config);

  // optional int32 queue_size = 2 [default = 1];
  bool has_queue_size() const;
  void clear_queue_size();
  static const int kQueueSizeFieldNumber = 2;
  ::google::protobuf::int32 queue_size() const;
  void set_queue_size(::google::protobuf::int32 value);

  // optional int64 sync_steps = 3 [default = 1];
  bool has_sync_steps() const;
  void clear_sync_steps();
  static const int kSyncStepsFieldNumber = 3;
  ::google::protobuf::int64 sync_steps() const;
  void set_sync_steps(::google::protobuf::int64 value);

  // optional int32 start_cpu_core_id = 4 [default = 1];
  bool has_start_cpu_core_id() const;
  void clear_start_cpu_core_id();
  static const int kStartCpuCoreIdFieldNumber = 4;
  ::google::protobuf::int32 start_cpu_core_id() const;
  void set_start_cpu_core_id(::google::protobuf::int32 value);

  // repeated string param_need_sync = 5;
  int param_need_sync_size() const;
  void clear_param_need_sync();
  static const int kParamNeedSyncFieldNumber = 5;
  const ::std::string& param_need_sync(int index) const;
  ::std::string* mutable_param_need_sync(int index);
  void set_param_need_sync(int index, const ::std::string& value);
  void set_param_need_sync(int index, const char* value);
  void set_param_need_sync(int index, const char* value, size_t size);
  ::std::string* add_param_need_sync();
  void add_param_need_sync(const ::std::string& value);
  void add_param_need_sync(const char* value);
  void add_param_need_sync(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& param_need_sync() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_param_need_sync();

  // optional int32 num_microbatches = 6;
  bool has_num_microbatches() const;
  void clear_num_microbatches();
  static const int kNumMicrobatchesFieldNumber = 6;
  ::google::protobuf::int32 num_microbatches() const;
  void set_num_microbatches(::google::protobuf::int32 value);

  // optional int32 num_pipeline_stages = 7 [default = 1];
  bool has_num_pipeline_stages() const;
  void clear_num_pipeline_stages();
  static const int kNumPipelineStagesFieldNumber = 7;
  ::google::protobuf::int32 num_pipeline_stages() const;
  void set_num_pipeline_stages(::google::protobuf::int32 value);

  // optional int32 pipeline_stage = 8 [default = 1];
  bool has_pipeline_stage() const;
  void clear_pipeline_stage();
  static const int kPipelineStageFieldNumber = 8;
  ::google::protobuf::int32 pipeline_stage() const;
  void set_pipeline_stage(::google::protobuf::int32 value);

  // optional int32 schedule_mode = 9 [default = 0];
  bool has_schedule_mode() const;
  void clear_schedule_mode();
  static const int kScheduleModeFieldNumber = 9;
  ::google::protobuf::int32 schedule_mode() const;
  void set_schedule_mode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:paddle.framework.SectionWorkerParameter)
 private:
  inline void set_has_section_config();
  inline void clear_has_section_config();
  inline void set_has_queue_size();
  inline void clear_has_queue_size();
  inline void set_has_sync_steps();
  inline void clear_has_sync_steps();
  inline void set_has_start_cpu_core_id();
  inline void clear_has_start_cpu_core_id();
  inline void set_has_num_microbatches();
  inline void clear_has_num_microbatches();
  inline void set_has_num_pipeline_stages();
  inline void clear_has_num_pipeline_stages();
  inline void set_has_pipeline_stage();
  inline void clear_has_pipeline_stage();
  inline void set_has_schedule_mode();
  inline void clear_has_schedule_mode();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> param_need_sync_;
  ::paddle::framework::SectionConfig* section_config_;
  ::google::protobuf::int32 num_microbatches_;
  ::google::protobuf::int32 schedule_mode_;
  ::google::protobuf::int64 sync_steps_;
  ::google::protobuf::int32 queue_size_;
  ::google::protobuf::int32 start_cpu_core_id_;
  ::google::protobuf::int32 num_pipeline_stages_;
  ::google::protobuf::int32 pipeline_stage_;
  friend void  protobuf_InitDefaults_trainer_5fdesc_2eproto_impl();
  friend void  protobuf_AddDesc_trainer_5fdesc_2eproto_impl();
  friend void protobuf_AssignDesc_trainer_5fdesc_2eproto();
  friend void protobuf_ShutdownFile_trainer_5fdesc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SectionWorkerParameter> SectionWorkerParameter_default_instance_;

// -------------------------------------------------------------------

class HeterSectionWorkerParameter : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:paddle.framework.HeterSectionWorkerParameter) */ {
 public:
  HeterSectionWorkerParameter();
  virtual ~HeterSectionWorkerParameter();

  HeterSectionWorkerParameter(const HeterSectionWorkerParameter& from);

  inline HeterSectionWorkerParameter& operator=(const HeterSectionWorkerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const HeterSectionWorkerParameter& default_instance();

  static const HeterSectionWorkerParameter* internal_default_instance();

  void Swap(HeterSectionWorkerParameter* other);

  // implements Message ----------------------------------------------

  inline HeterSectionWorkerParameter* New() const { return New(NULL); }

  HeterSectionWorkerParameter* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const HeterSectionWorkerParameter& from);
  void MergeFrom(const HeterSectionWorkerParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeterSectionWorkerParameter* other);
  void UnsafeMergeFrom(const HeterSectionWorkerParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .paddle.framework.SectionConfig section_config = 1;
  bool has_section_config() const;
  void clear_section_config();
  static const int kSectionConfigFieldNumber = 1;
  const ::paddle::framework::SectionConfig& section_config() const;
  ::paddle::framework::SectionConfig* mutable_section_config();
  ::paddle::framework::SectionConfig* release_section_config();
  void set_allocated_section_config(::paddle::framework::SectionConfig* section_config);

  // optional int32 queue_size = 2 [default = 1];
  bool has_queue_size() const;
  void clear_queue_size();
  static const int kQueueSizeFieldNumber = 2;
  ::google::protobuf::int32 queue_size() const;
  void set_queue_size(::google::protobuf::int32 value);

  // optional int64 sync_steps = 3 [default = 1];
  bool has_sync_steps() const;
  void clear_sync_steps();
  static const int kSyncStepsFieldNumber = 3;
  ::google::protobuf::int64 sync_steps() const;
  void set_sync_steps(::google::protobuf::int64 value);

  // optional int32 start_cpu_core_id = 4 [default = 1];
  bool has_start_cpu_core_id() const;
  void clear_start_cpu_core_id();
  static const int kStartCpuCoreIdFieldNumber = 4;
  ::google::protobuf::int32 start_cpu_core_id() const;
  void set_start_cpu_core_id(::google::protobuf::int32 value);

  // repeated string param_need_sync = 5;
  int param_need_sync_size() const;
  void clear_param_need_sync();
  static const int kParamNeedSyncFieldNumber = 5;
  const ::std::string& param_need_sync(int index) const;
  ::std::string* mutable_param_need_sync(int index);
  void set_param_need_sync(int index, const ::std::string& value);
  void set_param_need_sync(int index, const char* value);
  void set_param_need_sync(int index, const char* value, size_t size);
  ::std::string* add_param_need_sync();
  void add_param_need_sync(const ::std::string& value);
  void add_param_need_sync(const char* value);
  void add_param_need_sync(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& param_need_sync() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_param_need_sync();

  // optional int32 num_microbatches = 6;
  bool has_num_microbatches() const;
  void clear_num_microbatches();
  static const int kNumMicrobatchesFieldNumber = 6;
  ::google::protobuf::int32 num_microbatches() const;
  void set_num_microbatches(::google::protobuf::int32 value);

  // optional int32 num_pipeline_stages = 7 [default = 1];
  bool has_num_pipeline_stages() const;
  void clear_num_pipeline_stages();
  static const int kNumPipelineStagesFieldNumber = 7;
  ::google::protobuf::int32 num_pipeline_stages() const;
  void set_num_pipeline_stages(::google::protobuf::int32 value);

  // optional int32 pipeline_stage = 8 [default = 1];
  bool has_pipeline_stage() const;
  void clear_pipeline_stage();
  static const int kPipelineStageFieldNumber = 8;
  ::google::protobuf::int32 pipeline_stage() const;
  void set_pipeline_stage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:paddle.framework.HeterSectionWorkerParameter)
 private:
  inline void set_has_section_config();
  inline void clear_has_section_config();
  inline void set_has_queue_size();
  inline void clear_has_queue_size();
  inline void set_has_sync_steps();
  inline void clear_has_sync_steps();
  inline void set_has_start_cpu_core_id();
  inline void clear_has_start_cpu_core_id();
  inline void set_has_num_microbatches();
  inline void clear_has_num_microbatches();
  inline void set_has_num_pipeline_stages();
  inline void clear_has_num_pipeline_stages();
  inline void set_has_pipeline_stage();
  inline void clear_has_pipeline_stage();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> param_need_sync_;
  ::paddle::framework::SectionConfig* section_config_;
  ::google::protobuf::int32 num_microbatches_;
  ::google::protobuf::int64 sync_steps_;
  ::google::protobuf::int32 queue_size_;
  ::google::protobuf::int32 start_cpu_core_id_;
  ::google::protobuf::int32 num_pipeline_stages_;
  ::google::protobuf::int32 pipeline_stage_;
  friend void  protobuf_InitDefaults_trainer_5fdesc_2eproto_impl();
  friend void  protobuf_AddDesc_trainer_5fdesc_2eproto_impl();
  friend void protobuf_AssignDesc_trainer_5fdesc_2eproto();
  friend void protobuf_ShutdownFile_trainer_5fdesc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<HeterSectionWorkerParameter> HeterSectionWorkerParameter_default_instance_;

// -------------------------------------------------------------------

class SectionConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:paddle.framework.SectionConfig) */ {
 public:
  SectionConfig();
  virtual ~SectionConfig();

  SectionConfig(const SectionConfig& from);

  inline SectionConfig& operator=(const SectionConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const SectionConfig& default_instance();

  static const SectionConfig* internal_default_instance();

  void Swap(SectionConfig* other);

  // implements Message ----------------------------------------------

  inline SectionConfig* New() const { return New(NULL); }

  SectionConfig* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SectionConfig& from);
  void MergeFrom(const SectionConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SectionConfig* other);
  void UnsafeMergeFrom(const SectionConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef SectionConfig_Place Place;
  static const Place CPUPlace =
    SectionConfig_Place_CPUPlace;
  static const Place CUDAPlace =
    SectionConfig_Place_CUDAPlace;
  static const Place CUDAPinnedPlace =
    SectionConfig_Place_CUDAPinnedPlace;
  static inline bool Place_IsValid(int value) {
    return SectionConfig_Place_IsValid(value);
  }
  static const Place Place_MIN =
    SectionConfig_Place_Place_MIN;
  static const Place Place_MAX =
    SectionConfig_Place_Place_MAX;
  static const int Place_ARRAYSIZE =
    SectionConfig_Place_Place_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .paddle.framework.proto.ProgramDesc program_desc = 1;
  bool has_program_desc() const;
  void clear_program_desc();
  static const int kProgramDescFieldNumber = 1;
  const ::paddle::framework::proto::ProgramDesc& program_desc() const;
  ::paddle::framework::proto::ProgramDesc* mutable_program_desc();
  ::paddle::framework::proto::ProgramDesc* release_program_desc();
  void set_allocated_program_desc(::paddle::framework::proto::ProgramDesc* program_desc);

  // optional .paddle.framework.SectionConfig.Place place = 2;
  bool has_place() const;
  void clear_place();
  static const int kPlaceFieldNumber = 2;
  ::paddle::framework::SectionConfig_Place place() const;
  void set_place(::paddle::framework::SectionConfig_Place value);

  // optional int32 concurrency = 3 [default = 1];
  bool has_concurrency() const;
  void clear_concurrency();
  static const int kConcurrencyFieldNumber = 3;
  ::google::protobuf::int32 concurrency() const;
  void set_concurrency(::google::protobuf::int32 value);

  // repeated string section_in_var_names = 4;
  int section_in_var_names_size() const;
  void clear_section_in_var_names();
  static const int kSectionInVarNamesFieldNumber = 4;
  const ::std::string& section_in_var_names(int index) const;
  ::std::string* mutable_section_in_var_names(int index);
  void set_section_in_var_names(int index, const ::std::string& value);
  void set_section_in_var_names(int index, const char* value);
  void set_section_in_var_names(int index, const char* value, size_t size);
  ::std::string* add_section_in_var_names();
  void add_section_in_var_names(const ::std::string& value);
  void add_section_in_var_names(const char* value);
  void add_section_in_var_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& section_in_var_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_section_in_var_names();

  // repeated string section_out_var_names = 5;
  int section_out_var_names_size() const;
  void clear_section_out_var_names();
  static const int kSectionOutVarNamesFieldNumber = 5;
  const ::std::string& section_out_var_names(int index) const;
  ::std::string* mutable_section_out_var_names(int index);
  void set_section_out_var_names(int index, const ::std::string& value);
  void set_section_out_var_names(int index, const char* value);
  void set_section_out_var_names(int index, const char* value, size_t size);
  ::std::string* add_section_out_var_names();
  void add_section_out_var_names(const ::std::string& value);
  void add_section_out_var_names(const char* value);
  void add_section_out_var_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& section_out_var_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_section_out_var_names();

  // optional int32 place_id = 6 [default = -1];
  bool has_place_id() const;
  void clear_place_id();
  static const int kPlaceIdFieldNumber = 6;
  ::google::protobuf::int32 place_id() const;
  void set_place_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:paddle.framework.SectionConfig)
 private:
  inline void set_has_program_desc();
  inline void clear_has_program_desc();
  inline void set_has_place();
  inline void clear_has_place();
  inline void set_has_concurrency();
  inline void clear_has_concurrency();
  inline void set_has_place_id();
  inline void clear_has_place_id();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> section_in_var_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> section_out_var_names_;
  ::paddle::framework::proto::ProgramDesc* program_desc_;
  int place_;
  ::google::protobuf::int32 concurrency_;
  ::google::protobuf::int32 place_id_;
  friend void  protobuf_InitDefaults_trainer_5fdesc_2eproto_impl();
  friend void  protobuf_AddDesc_trainer_5fdesc_2eproto_impl();
  friend void protobuf_AssignDesc_trainer_5fdesc_2eproto();
  friend void protobuf_ShutdownFile_trainer_5fdesc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SectionConfig> SectionConfig_default_instance_;

// -------------------------------------------------------------------

class FetchConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:paddle.framework.FetchConfig) */ {
 public:
  FetchConfig();
  virtual ~FetchConfig();

  FetchConfig(const FetchConfig& from);

  inline FetchConfig& operator=(const FetchConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const FetchConfig& default_instance();

  static const FetchConfig* internal_default_instance();

  void Swap(FetchConfig* other);

  // implements Message ----------------------------------------------

  inline FetchConfig* New() const { return New(NULL); }

  FetchConfig* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FetchConfig& from);
  void MergeFrom(const FetchConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FetchConfig* other);
  void UnsafeMergeFrom(const FetchConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef FetchConfig_Method Method;
  static const Method PRINT =
    FetchConfig_Method_PRINT;
  static inline bool Method_IsValid(int value) {
    return FetchConfig_Method_IsValid(value);
  }
  static const Method Method_MIN =
    FetchConfig_Method_Method_MIN;
  static const Method Method_MAX =
    FetchConfig_Method_Method_MAX;
  static const int Method_ARRAYSIZE =
    FetchConfig_Method_Method_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated string fetch_var_names = 1;
  int fetch_var_names_size() const;
  void clear_fetch_var_names();
  static const int kFetchVarNamesFieldNumber = 1;
  const ::std::string& fetch_var_names(int index) const;
  ::std::string* mutable_fetch_var_names(int index);
  void set_fetch_var_names(int index, const ::std::string& value);
  void set_fetch_var_names(int index, const char* value);
  void set_fetch_var_names(int index, const char* value, size_t size);
  ::std::string* add_fetch_var_names();
  void add_fetch_var_names(const ::std::string& value);
  void add_fetch_var_names(const char* value);
  void add_fetch_var_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fetch_var_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fetch_var_names();

  // repeated string fetch_var_str_format = 2;
  int fetch_var_str_format_size() const;
  void clear_fetch_var_str_format();
  static const int kFetchVarStrFormatFieldNumber = 2;
  const ::std::string& fetch_var_str_format(int index) const;
  ::std::string* mutable_fetch_var_str_format(int index);
  void set_fetch_var_str_format(int index, const ::std::string& value);
  void set_fetch_var_str_format(int index, const char* value);
  void set_fetch_var_str_format(int index, const char* value, size_t size);
  ::std::string* add_fetch_var_str_format();
  void add_fetch_var_str_format(const ::std::string& value);
  void add_fetch_var_str_format(const char* value);
  void add_fetch_var_str_format(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fetch_var_str_format() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fetch_var_str_format();

  // optional int32 print_period = 3 [default = 100];
  bool has_print_period() const;
  void clear_print_period();
  static const int kPrintPeriodFieldNumber = 3;
  ::google::protobuf::int32 print_period() const;
  void set_print_period(::google::protobuf::int32 value);

  // optional .paddle.framework.FetchConfig.Method method = 4 [default = PRINT];
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 4;
  ::paddle::framework::FetchConfig_Method method() const;
  void set_method(::paddle::framework::FetchConfig_Method value);

  // @@protoc_insertion_point(class_scope:paddle.framework.FetchConfig)
 private:
  inline void set_has_print_period();
  inline void clear_has_print_period();
  inline void set_has_method();
  inline void clear_has_method();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fetch_var_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fetch_var_str_format_;
  int method_;
  ::google::protobuf::int32 print_period_;
  friend void  protobuf_InitDefaults_trainer_5fdesc_2eproto_impl();
  friend void  protobuf_AddDesc_trainer_5fdesc_2eproto_impl();
  friend void protobuf_AssignDesc_trainer_5fdesc_2eproto();
  friend void protobuf_ShutdownFile_trainer_5fdesc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<FetchConfig> FetchConfig_default_instance_;

// -------------------------------------------------------------------

class AdjustInsWeightConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:paddle.framework.AdjustInsWeightConfig) */ {
 public:
  AdjustInsWeightConfig();
  virtual ~AdjustInsWeightConfig();

  AdjustInsWeightConfig(const AdjustInsWeightConfig& from);

  inline AdjustInsWeightConfig& operator=(const AdjustInsWeightConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const AdjustInsWeightConfig& default_instance();

  static const AdjustInsWeightConfig* internal_default_instance();

  void Swap(AdjustInsWeightConfig* other);

  // implements Message ----------------------------------------------

  inline AdjustInsWeightConfig* New() const { return New(NULL); }

  AdjustInsWeightConfig* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AdjustInsWeightConfig& from);
  void MergeFrom(const AdjustInsWeightConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdjustInsWeightConfig* other);
  void UnsafeMergeFrom(const AdjustInsWeightConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool need_adjust = 1 [default = false];
  bool has_need_adjust() const;
  void clear_need_adjust();
  static const int kNeedAdjustFieldNumber = 1;
  bool need_adjust() const;
  void set_need_adjust(bool value);

  // optional string nid_slot = 2 [default = ""];
  bool has_nid_slot() const;
  void clear_nid_slot();
  static const int kNidSlotFieldNumber = 2;
  const ::std::string& nid_slot() const;
  void set_nid_slot(const ::std::string& value);
  void set_nid_slot(const char* value);
  void set_nid_slot(const char* value, size_t size);
  ::std::string* mutable_nid_slot();
  ::std::string* release_nid_slot();
  void set_allocated_nid_slot(::std::string* nid_slot);

  // optional float nid_adjw_threshold = 3 [default = 0];
  bool has_nid_adjw_threshold() const;
  void clear_nid_adjw_threshold();
  static const int kNidAdjwThresholdFieldNumber = 3;
  float nid_adjw_threshold() const;
  void set_nid_adjw_threshold(float value);

  // optional float nid_adjw_ratio = 4 [default = 0];
  bool has_nid_adjw_ratio() const;
  void clear_nid_adjw_ratio();
  static const int kNidAdjwRatioFieldNumber = 4;
  float nid_adjw_ratio() const;
  void set_nid_adjw_ratio(float value);

  // optional string ins_weight_slot = 5 [default = ""];
  bool has_ins_weight_slot() const;
  void clear_ins_weight_slot();
  static const int kInsWeightSlotFieldNumber = 5;
  const ::std::string& ins_weight_slot() const;
  void set_ins_weight_slot(const ::std::string& value);
  void set_ins_weight_slot(const char* value);
  void set_ins_weight_slot(const char* value, size_t size);
  ::std::string* mutable_ins_weight_slot();
  ::std::string* release_ins_weight_slot();
  void set_allocated_ins_weight_slot(::std::string* ins_weight_slot);

  // @@protoc_insertion_point(class_scope:paddle.framework.AdjustInsWeightConfig)
 private:
  inline void set_has_need_adjust();
  inline void clear_has_need_adjust();
  inline void set_has_nid_slot();
  inline void clear_has_nid_slot();
  inline void set_has_nid_adjw_threshold();
  inline void clear_has_nid_adjw_threshold();
  inline void set_has_nid_adjw_ratio();
  inline void clear_has_nid_adjw_ratio();
  inline void set_has_ins_weight_slot();
  inline void clear_has_ins_weight_slot();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr nid_slot_;
  ::google::protobuf::internal::ArenaStringPtr ins_weight_slot_;
  bool need_adjust_;
  float nid_adjw_threshold_;
  float nid_adjw_ratio_;
  friend void  protobuf_InitDefaults_trainer_5fdesc_2eproto_impl();
  friend void  protobuf_AddDesc_trainer_5fdesc_2eproto_impl();
  friend void protobuf_AssignDesc_trainer_5fdesc_2eproto();
  friend void protobuf_ShutdownFile_trainer_5fdesc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AdjustInsWeightConfig> AdjustInsWeightConfig_default_instance_;

// -------------------------------------------------------------------

class TableDependencyMap : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:paddle.framework.TableDependencyMap) */ {
 public:
  TableDependencyMap();
  virtual ~TableDependencyMap();

  TableDependencyMap(const TableDependencyMap& from);

  inline TableDependencyMap& operator=(const TableDependencyMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const TableDependencyMap& default_instance();

  static const TableDependencyMap* internal_default_instance();

  void Swap(TableDependencyMap* other);

  // implements Message ----------------------------------------------

  inline TableDependencyMap* New() const { return New(NULL); }

  TableDependencyMap* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TableDependencyMap& from);
  void MergeFrom(const TableDependencyMap& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TableDependencyMap* other);
  void UnsafeMergeFrom(const TableDependencyMap& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // repeated int32 values = 2;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  ::google::protobuf::int32 values(int index) const;
  void set_values(int index, ::google::protobuf::int32 value);
  void add_values(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      values() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:paddle.framework.TableDependencyMap)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > values_;
  ::google::protobuf::int32 key_;
  friend void  protobuf_InitDefaults_trainer_5fdesc_2eproto_impl();
  friend void  protobuf_AddDesc_trainer_5fdesc_2eproto_impl();
  friend void protobuf_AssignDesc_trainer_5fdesc_2eproto();
  friend void protobuf_ShutdownFile_trainer_5fdesc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TableDependencyMap> TableDependencyMap_default_instance_;

// -------------------------------------------------------------------

class CopyTableConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:paddle.framework.CopyTableConfig) */ {
 public:
  CopyTableConfig();
  virtual ~CopyTableConfig();

  CopyTableConfig(const CopyTableConfig& from);

  inline CopyTableConfig& operator=(const CopyTableConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const CopyTableConfig& default_instance();

  static const CopyTableConfig* internal_default_instance();

  void Swap(CopyTableConfig* other);

  // implements Message ----------------------------------------------

  inline CopyTableConfig* New() const { return New(NULL); }

  CopyTableConfig* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CopyTableConfig& from);
  void MergeFrom(const CopyTableConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CopyTableConfig* other);
  void UnsafeMergeFrom(const CopyTableConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool need_copy = 1 [default = false];
  bool has_need_copy() const;
  void clear_need_copy();
  static const int kNeedCopyFieldNumber = 1;
  bool need_copy() const;
  void set_need_copy(bool value);

  // optional int32 batch_num = 2 [default = 100];
  bool has_batch_num() const;
  void clear_batch_num();
  static const int kBatchNumFieldNumber = 2;
  ::google::protobuf::int32 batch_num() const;
  void set_batch_num(::google::protobuf::int32 value);

  // repeated int32 src_sparse_tables = 3;
  int src_sparse_tables_size() const;
  void clear_src_sparse_tables();
  static const int kSrcSparseTablesFieldNumber = 3;
  ::google::protobuf::int32 src_sparse_tables(int index) const;
  void set_src_sparse_tables(int index, ::google::protobuf::int32 value);
  void add_src_sparse_tables(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      src_sparse_tables() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_src_sparse_tables();

  // repeated int32 dest_sparse_tables = 4;
  int dest_sparse_tables_size() const;
  void clear_dest_sparse_tables();
  static const int kDestSparseTablesFieldNumber = 4;
  ::google::protobuf::int32 dest_sparse_tables(int index) const;
  void set_dest_sparse_tables(int index, ::google::protobuf::int32 value);
  void add_dest_sparse_tables(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dest_sparse_tables() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dest_sparse_tables();

  // repeated int32 src_dense_tables = 5;
  int src_dense_tables_size() const;
  void clear_src_dense_tables();
  static const int kSrcDenseTablesFieldNumber = 5;
  ::google::protobuf::int32 src_dense_tables(int index) const;
  void set_src_dense_tables(int index, ::google::protobuf::int32 value);
  void add_src_dense_tables(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      src_dense_tables() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_src_dense_tables();

  // repeated int32 dest_dense_tables = 6;
  int dest_dense_tables_size() const;
  void clear_dest_dense_tables();
  static const int kDestDenseTablesFieldNumber = 6;
  ::google::protobuf::int32 dest_dense_tables(int index) const;
  void set_dest_dense_tables(int index, ::google::protobuf::int32 value);
  void add_dest_dense_tables(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dest_dense_tables() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dest_dense_tables();

  // repeated string src_var_list = 7;
  int src_var_list_size() const;
  void clear_src_var_list();
  static const int kSrcVarListFieldNumber = 7;
  const ::std::string& src_var_list(int index) const;
  ::std::string* mutable_src_var_list(int index);
  void set_src_var_list(int index, const ::std::string& value);
  void set_src_var_list(int index, const char* value);
  void set_src_var_list(int index, const char* value, size_t size);
  ::std::string* add_src_var_list();
  void add_src_var_list(const ::std::string& value);
  void add_src_var_list(const char* value);
  void add_src_var_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& src_var_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_src_var_list();

  // repeated string dest_var_list = 8;
  int dest_var_list_size() const;
  void clear_dest_var_list();
  static const int kDestVarListFieldNumber = 8;
  const ::std::string& dest_var_list(int index) const;
  ::std::string* mutable_dest_var_list(int index);
  void set_dest_var_list(int index, const ::std::string& value);
  void set_dest_var_list(int index, const char* value);
  void set_dest_var_list(int index, const char* value, size_t size);
  ::std::string* add_dest_var_list();
  void add_dest_var_list(const ::std::string& value);
  void add_dest_var_list(const char* value);
  void add_dest_var_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& dest_var_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dest_var_list();

  // optional bool dense_pull_after_copy = 9 [default = false];
  bool has_dense_pull_after_copy() const;
  void clear_dense_pull_after_copy();
  static const int kDensePullAfterCopyFieldNumber = 9;
  bool dense_pull_after_copy() const;
  void set_dense_pull_after_copy(bool value);

  // optional bool sparse_copy_by_feasign = 10 [default = true];
  bool has_sparse_copy_by_feasign() const;
  void clear_sparse_copy_by_feasign();
  static const int kSparseCopyByFeasignFieldNumber = 10;
  bool sparse_copy_by_feasign() const;
  void set_sparse_copy_by_feasign(bool value);

  // optional bool enable_dependency = 11 [default = false];
  bool has_enable_dependency() const;
  void clear_enable_dependency();
  static const int kEnableDependencyFieldNumber = 11;
  bool enable_dependency() const;
  void set_enable_dependency(bool value);

  // repeated .paddle.framework.TableDependencyMap table_denpendency_map = 12;
  int table_denpendency_map_size() const;
  void clear_table_denpendency_map();
  static const int kTableDenpendencyMapFieldNumber = 12;
  const ::paddle::framework::TableDependencyMap& table_denpendency_map(int index) const;
  ::paddle::framework::TableDependencyMap* mutable_table_denpendency_map(int index);
  ::paddle::framework::TableDependencyMap* add_table_denpendency_map();
  ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableDependencyMap >*
      mutable_table_denpendency_map();
  const ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableDependencyMap >&
      table_denpendency_map() const;

  // @@protoc_insertion_point(class_scope:paddle.framework.CopyTableConfig)
 private:
  inline void set_has_need_copy();
  inline void clear_has_need_copy();
  inline void set_has_batch_num();
  inline void clear_has_batch_num();
  inline void set_has_dense_pull_after_copy();
  inline void clear_has_dense_pull_after_copy();
  inline void set_has_sparse_copy_by_feasign();
  inline void clear_has_sparse_copy_by_feasign();
  inline void set_has_enable_dependency();
  inline void clear_has_enable_dependency();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > src_sparse_tables_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dest_sparse_tables_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > src_dense_tables_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dest_dense_tables_;
  ::google::protobuf::RepeatedPtrField< ::std::string> src_var_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dest_var_list_;
  ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableDependencyMap > table_denpendency_map_;
  bool need_copy_;
  bool dense_pull_after_copy_;
  bool enable_dependency_;
  ::google::protobuf::int32 batch_num_;
  bool sparse_copy_by_feasign_;
  friend void  protobuf_InitDefaults_trainer_5fdesc_2eproto_impl();
  friend void  protobuf_AddDesc_trainer_5fdesc_2eproto_impl();
  friend void protobuf_AssignDesc_trainer_5fdesc_2eproto();
  friend void protobuf_ShutdownFile_trainer_5fdesc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CopyTableConfig> CopyTableConfig_default_instance_;

// -------------------------------------------------------------------

class CondTableMap : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:paddle.framework.CondTableMap) */ {
 public:
  CondTableMap();
  virtual ~CondTableMap();

  CondTableMap(const CondTableMap& from);

  inline CondTableMap& operator=(const CondTableMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const CondTableMap& default_instance();

  static const CondTableMap* internal_default_instance();

  void Swap(CondTableMap* other);

  // implements Message ----------------------------------------------

  inline CondTableMap* New() const { return New(NULL); }

  CondTableMap* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CondTableMap& from);
  void MergeFrom(const CondTableMap& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CondTableMap* other);
  void UnsafeMergeFrom(const CondTableMap& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // required int32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:paddle.framework.CondTableMap)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 value_;
  friend void  protobuf_InitDefaults_trainer_5fdesc_2eproto_impl();
  friend void  protobuf_AddDesc_trainer_5fdesc_2eproto_impl();
  friend void protobuf_AssignDesc_trainer_5fdesc_2eproto();
  friend void protobuf_ShutdownFile_trainer_5fdesc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CondTableMap> CondTableMap_default_instance_;

// -------------------------------------------------------------------

class ProgramConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:paddle.framework.ProgramConfig) */ {
 public:
  ProgramConfig();
  virtual ~ProgramConfig();

  ProgramConfig(const ProgramConfig& from);

  inline ProgramConfig& operator=(const ProgramConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const ProgramConfig& default_instance();

  static const ProgramConfig* internal_default_instance();

  void Swap(ProgramConfig* other);

  // implements Message ----------------------------------------------

  inline ProgramConfig* New() const { return New(NULL); }

  ProgramConfig* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ProgramConfig& from);
  void MergeFrom(const ProgramConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProgramConfig* other);
  void UnsafeMergeFrom(const ProgramConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string program_id = 1;
  bool has_program_id() const;
  void clear_program_id();
  static const int kProgramIdFieldNumber = 1;
  const ::std::string& program_id() const;
  void set_program_id(const ::std::string& value);
  void set_program_id(const char* value);
  void set_program_id(const char* value, size_t size);
  ::std::string* mutable_program_id();
  ::std::string* release_program_id();
  void set_allocated_program_id(::std::string* program_id);

  // repeated int32 push_sparse_table_id = 2;
  int push_sparse_table_id_size() const;
  void clear_push_sparse_table_id();
  static const int kPushSparseTableIdFieldNumber = 2;
  ::google::protobuf::int32 push_sparse_table_id(int index) const;
  void set_push_sparse_table_id(int index, ::google::protobuf::int32 value);
  void add_push_sparse_table_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      push_sparse_table_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_push_sparse_table_id();

  // repeated int32 push_dense_table_id = 3;
  int push_dense_table_id_size() const;
  void clear_push_dense_table_id();
  static const int kPushDenseTableIdFieldNumber = 3;
  ::google::protobuf::int32 push_dense_table_id(int index) const;
  void set_push_dense_table_id(int index, ::google::protobuf::int32 value);
  void add_push_dense_table_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      push_dense_table_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_push_dense_table_id();

  // repeated int32 pull_sparse_table_id = 4;
  int pull_sparse_table_id_size() const;
  void clear_pull_sparse_table_id();
  static const int kPullSparseTableIdFieldNumber = 4;
  ::google::protobuf::int32 pull_sparse_table_id(int index) const;
  void set_pull_sparse_table_id(int index, ::google::protobuf::int32 value);
  void add_pull_sparse_table_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pull_sparse_table_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pull_sparse_table_id();

  // repeated int32 pull_dense_table_id = 5;
  int pull_dense_table_id_size() const;
  void clear_pull_dense_table_id();
  static const int kPullDenseTableIdFieldNumber = 5;
  ::google::protobuf::int32 pull_dense_table_id(int index) const;
  void set_pull_dense_table_id(int index, ::google::protobuf::int32 value);
  void add_pull_dense_table_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pull_dense_table_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pull_dense_table_id();

  // repeated .paddle.framework.CondTableMap partial_pushdense_condtable_map = 10;
  int partial_pushdense_condtable_map_size() const;
  void clear_partial_pushdense_condtable_map();
  static const int kPartialPushdenseCondtableMapFieldNumber = 10;
  const ::paddle::framework::CondTableMap& partial_pushdense_condtable_map(int index) const;
  ::paddle::framework::CondTableMap* mutable_partial_pushdense_condtable_map(int index);
  ::paddle::framework::CondTableMap* add_partial_pushdense_condtable_map();
  ::google::protobuf::RepeatedPtrField< ::paddle::framework::CondTableMap >*
      mutable_partial_pushdense_condtable_map();
  const ::google::protobuf::RepeatedPtrField< ::paddle::framework::CondTableMap >&
      partial_pushdense_condtable_map() const;

  // @@protoc_insertion_point(class_scope:paddle.framework.ProgramConfig)
 private:
  inline void set_has_program_id();
  inline void clear_has_program_id();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > push_sparse_table_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > push_dense_table_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pull_sparse_table_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pull_dense_table_id_;
  ::google::protobuf::RepeatedPtrField< ::paddle::framework::CondTableMap > partial_pushdense_condtable_map_;
  ::google::protobuf::internal::ArenaStringPtr program_id_;
  friend void  protobuf_InitDefaults_trainer_5fdesc_2eproto_impl();
  friend void  protobuf_AddDesc_trainer_5fdesc_2eproto_impl();
  friend void protobuf_AssignDesc_trainer_5fdesc_2eproto();
  friend void protobuf_ShutdownFile_trainer_5fdesc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ProgramConfig> ProgramConfig_default_instance_;

// -------------------------------------------------------------------

class PullDenseWorkerParameter : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:paddle.framework.PullDenseWorkerParameter) */ {
 public:
  PullDenseWorkerParameter();
  virtual ~PullDenseWorkerParameter();

  PullDenseWorkerParameter(const PullDenseWorkerParameter& from);

  inline PullDenseWorkerParameter& operator=(const PullDenseWorkerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const PullDenseWorkerParameter& default_instance();

  static const PullDenseWorkerParameter* internal_default_instance();

  void Swap(PullDenseWorkerParameter* other);

  // implements Message ----------------------------------------------

  inline PullDenseWorkerParameter* New() const { return New(NULL); }

  PullDenseWorkerParameter* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PullDenseWorkerParameter& from);
  void MergeFrom(const PullDenseWorkerParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PullDenseWorkerParameter* other);
  void UnsafeMergeFrom(const PullDenseWorkerParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 threshold = 1 [default = 1];
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 1;
  ::google::protobuf::int32 threshold() const;
  void set_threshold(::google::protobuf::int32 value);

  // optional int32 device_num = 2;
  bool has_device_num() const;
  void clear_device_num();
  static const int kDeviceNumFieldNumber = 2;
  ::google::protobuf::int32 device_num() const;
  void set_device_num(::google::protobuf::int32 value);

  // optional int32 sleep_time_ms = 3 [default = 2];
  bool has_sleep_time_ms() const;
  void clear_sleep_time_ms();
  static const int kSleepTimeMsFieldNumber = 3;
  ::google::protobuf::int32 sleep_time_ms() const;
  void set_sleep_time_ms(::google::protobuf::int32 value);

  // repeated .paddle.framework.TableParameter dense_table = 4;
  int dense_table_size() const;
  void clear_dense_table();
  static const int kDenseTableFieldNumber = 4;
  const ::paddle::framework::TableParameter& dense_table(int index) const;
  ::paddle::framework::TableParameter* mutable_dense_table(int index);
  ::paddle::framework::TableParameter* add_dense_table();
  ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableParameter >*
      mutable_dense_table();
  const ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableParameter >&
      dense_table() const;

  // @@protoc_insertion_point(class_scope:paddle.framework.PullDenseWorkerParameter)
 private:
  inline void set_has_threshold();
  inline void clear_has_threshold();
  inline void set_has_device_num();
  inline void clear_has_device_num();
  inline void set_has_sleep_time_ms();
  inline void clear_has_sleep_time_ms();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableParameter > dense_table_;
  ::google::protobuf::int32 device_num_;
  ::google::protobuf::int32 threshold_;
  ::google::protobuf::int32 sleep_time_ms_;
  friend void  protobuf_InitDefaults_trainer_5fdesc_2eproto_impl();
  friend void  protobuf_AddDesc_trainer_5fdesc_2eproto_impl();
  friend void protobuf_AssignDesc_trainer_5fdesc_2eproto();
  friend void protobuf_ShutdownFile_trainer_5fdesc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PullDenseWorkerParameter> PullDenseWorkerParameter_default_instance_;

// -------------------------------------------------------------------

class TableParameter : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:paddle.framework.TableParameter) */ {
 public:
  TableParameter();
  virtual ~TableParameter();

  TableParameter(const TableParameter& from);

  inline TableParameter& operator=(const TableParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const TableParameter& default_instance();

  static const TableParameter* internal_default_instance();

  void Swap(TableParameter* other);

  // implements Message ----------------------------------------------

  inline TableParameter* New() const { return New(NULL); }

  TableParameter* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TableParameter& from);
  void MergeFrom(const TableParameter& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TableParameter* other);
  void UnsafeMergeFrom(const TableParameter& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 table_id = 1;
  bool has_table_id() const;
  void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  ::google::protobuf::uint64 table_id() const;
  void set_table_id(::google::protobuf::uint64 value);

  // repeated string dense_value_name = 2;
  int dense_value_name_size() const;
  void clear_dense_value_name();
  static const int kDenseValueNameFieldNumber = 2;
  const ::std::string& dense_value_name(int index) const;
  ::std::string* mutable_dense_value_name(int index);
  void set_dense_value_name(int index, const ::std::string& value);
  void set_dense_value_name(int index, const char* value);
  void set_dense_value_name(int index, const char* value, size_t size);
  ::std::string* add_dense_value_name();
  void add_dense_value_name(const ::std::string& value);
  void add_dense_value_name(const char* value);
  void add_dense_value_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& dense_value_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dense_value_name();

  // repeated string dense_grad_name = 3;
  int dense_grad_name_size() const;
  void clear_dense_grad_name();
  static const int kDenseGradNameFieldNumber = 3;
  const ::std::string& dense_grad_name(int index) const;
  ::std::string* mutable_dense_grad_name(int index);
  void set_dense_grad_name(int index, const ::std::string& value);
  void set_dense_grad_name(int index, const char* value);
  void set_dense_grad_name(int index, const char* value, size_t size);
  ::std::string* add_dense_grad_name();
  void add_dense_grad_name(const ::std::string& value);
  void add_dense_grad_name(const char* value);
  void add_dense_grad_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& dense_grad_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dense_grad_name();

  // repeated int32 push_dense_wait_times = 5;
  int push_dense_wait_times_size() const;
  void clear_push_dense_wait_times();
  static const int kPushDenseWaitTimesFieldNumber = 5;
  ::google::protobuf::int32 push_dense_wait_times(int index) const;
  void set_push_dense_wait_times(int index, ::google::protobuf::int32 value);
  void add_push_dense_wait_times(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      push_dense_wait_times() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_push_dense_wait_times();

  // repeated string sparse_key_name = 6;
  int sparse_key_name_size() const;
  void clear_sparse_key_name();
  static const int kSparseKeyNameFieldNumber = 6;
  const ::std::string& sparse_key_name(int index) const;
  ::std::string* mutable_sparse_key_name(int index);
  void set_sparse_key_name(int index, const ::std::string& value);
  void set_sparse_key_name(int index, const char* value);
  void set_sparse_key_name(int index, const char* value, size_t size);
  ::std::string* add_sparse_key_name();
  void add_sparse_key_name(const ::std::string& value);
  void add_sparse_key_name(const char* value);
  void add_sparse_key_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sparse_key_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sparse_key_name();

  // repeated string sparse_value_name = 7;
  int sparse_value_name_size() const;
  void clear_sparse_value_name();
  static const int kSparseValueNameFieldNumber = 7;
  const ::std::string& sparse_value_name(int index) const;
  ::std::string* mutable_sparse_value_name(int index);
  void set_sparse_value_name(int index, const ::std::string& value);
  void set_sparse_value_name(int index, const char* value);
  void set_sparse_value_name(int index, const char* value, size_t size);
  ::std::string* add_sparse_value_name();
  void add_sparse_value_name(const ::std::string& value);
  void add_sparse_value_name(const char* value);
  void add_sparse_value_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sparse_value_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sparse_value_name();

  // repeated string sparse_grad_name = 8;
  int sparse_grad_name_size() const;
  void clear_sparse_grad_name();
  static const int kSparseGradNameFieldNumber = 8;
  const ::std::string& sparse_grad_name(int index) const;
  ::std::string* mutable_sparse_grad_name(int index);
  void set_sparse_grad_name(int index, const ::std::string& value);
  void set_sparse_grad_name(int index, const char* value);
  void set_sparse_grad_name(int index, const char* value, size_t size);
  ::std::string* add_sparse_grad_name();
  void add_sparse_grad_name(const ::std::string& value);
  void add_sparse_grad_name(const char* value);
  void add_sparse_grad_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sparse_grad_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sparse_grad_name();

  // repeated int32 push_sparse_wait_times = 9;
  int push_sparse_wait_times_size() const;
  void clear_push_sparse_wait_times();
  static const int kPushSparseWaitTimesFieldNumber = 9;
  ::google::protobuf::int32 push_sparse_wait_times(int index) const;
  void set_push_sparse_wait_times(int index, ::google::protobuf::int32 value);
  void add_push_sparse_wait_times(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      push_sparse_wait_times() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_push_sparse_wait_times();

  // optional int32 emb_dim = 10;
  bool has_emb_dim() const;
  void clear_emb_dim();
  static const int kEmbDimFieldNumber = 10;
  ::google::protobuf::int32 emb_dim() const;
  void set_emb_dim(::google::protobuf::int32 value);

  // optional int32 fea_dim = 11;
  bool has_fea_dim() const;
  void clear_fea_dim();
  static const int kFeaDimFieldNumber = 11;
  ::google::protobuf::int32 fea_dim() const;
  void set_fea_dim(::google::protobuf::int32 value);

  // optional string label_var_name = 12;
  bool has_label_var_name() const;
  void clear_label_var_name();
  static const int kLabelVarNameFieldNumber = 12;
  const ::std::string& label_var_name() const;
  void set_label_var_name(const ::std::string& value);
  void set_label_var_name(const char* value);
  void set_label_var_name(const char* value, size_t size);
  ::std::string* mutable_label_var_name();
  ::std::string* release_label_var_name();
  void set_allocated_label_var_name(::std::string* label_var_name);

  // optional bool is_local = 13 [default = false];
  bool has_is_local() const;
  void clear_is_local();
  static const int kIsLocalFieldNumber = 13;
  bool is_local() const;
  void set_is_local(bool value);

  // optional bool is_async = 14 [default = false];
  bool has_is_async() const;
  void clear_is_async();
  static const int kIsAsyncFieldNumber = 14;
  bool is_async() const;
  void set_is_async(bool value);

  // optional string async_wait_op_name = 15;
  bool has_async_wait_op_name() const;
  void clear_async_wait_op_name();
  static const int kAsyncWaitOpNameFieldNumber = 15;
  const ::std::string& async_wait_op_name() const;
  void set_async_wait_op_name(const ::std::string& value);
  void set_async_wait_op_name(const char* value);
  void set_async_wait_op_name(const char* value, size_t size);
  ::std::string* mutable_async_wait_op_name();
  ::std::string* release_async_wait_op_name();
  void set_allocated_async_wait_op_name(::std::string* async_wait_op_name);

  // @@protoc_insertion_point(class_scope:paddle.framework.TableParameter)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_emb_dim();
  inline void clear_has_emb_dim();
  inline void set_has_fea_dim();
  inline void clear_has_fea_dim();
  inline void set_has_label_var_name();
  inline void clear_has_label_var_name();
  inline void set_has_is_local();
  inline void clear_has_is_local();
  inline void set_has_is_async();
  inline void clear_has_is_async();
  inline void set_has_async_wait_op_name();
  inline void clear_has_async_wait_op_name();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dense_value_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dense_grad_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > push_dense_wait_times_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sparse_key_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sparse_value_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sparse_grad_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > push_sparse_wait_times_;
  ::google::protobuf::internal::ArenaStringPtr label_var_name_;
  ::google::protobuf::internal::ArenaStringPtr async_wait_op_name_;
  ::google::protobuf::uint64 table_id_;
  ::google::protobuf::int32 emb_dim_;
  ::google::protobuf::int32 fea_dim_;
  bool is_local_;
  bool is_async_;
  friend void  protobuf_InitDefaults_trainer_5fdesc_2eproto_impl();
  friend void  protobuf_AddDesc_trainer_5fdesc_2eproto_impl();
  friend void protobuf_AssignDesc_trainer_5fdesc_2eproto();
  friend void protobuf_ShutdownFile_trainer_5fdesc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TableParameter> TableParameter_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TrainerDesc

// optional string class_name = 1;
inline bool TrainerDesc::has_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrainerDesc::set_has_class_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrainerDesc::clear_has_class_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrainerDesc::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_class_name();
}
inline const ::std::string& TrainerDesc::class_name() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.class_name)
  return class_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainerDesc::set_class_name(const ::std::string& value) {
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.class_name)
}
inline void TrainerDesc::set_class_name(const char* value) {
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paddle.framework.TrainerDesc.class_name)
}
inline void TrainerDesc::set_class_name(const char* value, size_t size) {
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TrainerDesc.class_name)
}
inline ::std::string* TrainerDesc::mutable_class_name() {
  set_has_class_name();
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.class_name)
  return class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainerDesc::release_class_name() {
  // @@protoc_insertion_point(field_release:paddle.framework.TrainerDesc.class_name)
  clear_has_class_name();
  return class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainerDesc::set_allocated_class_name(::std::string* class_name) {
  if (class_name != NULL) {
    set_has_class_name();
  } else {
    clear_has_class_name();
  }
  class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.TrainerDesc.class_name)
}

// optional string device_worker_name = 2;
inline bool TrainerDesc::has_device_worker_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrainerDesc::set_has_device_worker_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrainerDesc::clear_has_device_worker_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrainerDesc::clear_device_worker_name() {
  device_worker_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_worker_name();
}
inline const ::std::string& TrainerDesc::device_worker_name() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.device_worker_name)
  return device_worker_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainerDesc::set_device_worker_name(const ::std::string& value) {
  set_has_device_worker_name();
  device_worker_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.device_worker_name)
}
inline void TrainerDesc::set_device_worker_name(const char* value) {
  set_has_device_worker_name();
  device_worker_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paddle.framework.TrainerDesc.device_worker_name)
}
inline void TrainerDesc::set_device_worker_name(const char* value, size_t size) {
  set_has_device_worker_name();
  device_worker_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TrainerDesc.device_worker_name)
}
inline ::std::string* TrainerDesc::mutable_device_worker_name() {
  set_has_device_worker_name();
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.device_worker_name)
  return device_worker_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainerDesc::release_device_worker_name() {
  // @@protoc_insertion_point(field_release:paddle.framework.TrainerDesc.device_worker_name)
  clear_has_device_worker_name();
  return device_worker_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainerDesc::set_allocated_device_worker_name(::std::string* device_worker_name) {
  if (device_worker_name != NULL) {
    set_has_device_worker_name();
  } else {
    clear_has_device_worker_name();
  }
  device_worker_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_worker_name);
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.TrainerDesc.device_worker_name)
}

// optional int32 thread_num = 3;
inline bool TrainerDesc::has_thread_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrainerDesc::set_has_thread_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrainerDesc::clear_has_thread_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrainerDesc::clear_thread_num() {
  thread_num_ = 0;
  clear_has_thread_num();
}
inline ::google::protobuf::int32 TrainerDesc::thread_num() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.thread_num)
  return thread_num_;
}
inline void TrainerDesc::set_thread_num(::google::protobuf::int32 value) {
  set_has_thread_num();
  thread_num_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.thread_num)
}

// optional bool binding_cpu = 4 [default = false];
inline bool TrainerDesc::has_binding_cpu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrainerDesc::set_has_binding_cpu() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrainerDesc::clear_has_binding_cpu() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrainerDesc::clear_binding_cpu() {
  binding_cpu_ = false;
  clear_has_binding_cpu();
}
inline bool TrainerDesc::binding_cpu() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.binding_cpu)
  return binding_cpu_;
}
inline void TrainerDesc::set_binding_cpu(bool value) {
  set_has_binding_cpu();
  binding_cpu_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.binding_cpu)
}

// repeated string filelist = 5;
inline int TrainerDesc::filelist_size() const {
  return filelist_.size();
}
inline void TrainerDesc::clear_filelist() {
  filelist_.Clear();
}
inline const ::std::string& TrainerDesc::filelist(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.filelist)
  return filelist_.Get(index);
}
inline ::std::string* TrainerDesc::mutable_filelist(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.filelist)
  return filelist_.Mutable(index);
}
inline void TrainerDesc::set_filelist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.filelist)
  filelist_.Mutable(index)->assign(value);
}
inline void TrainerDesc::set_filelist(int index, const char* value) {
  filelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.TrainerDesc.filelist)
}
inline void TrainerDesc::set_filelist(int index, const char* value, size_t size) {
  filelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TrainerDesc.filelist)
}
inline ::std::string* TrainerDesc::add_filelist() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.TrainerDesc.filelist)
  return filelist_.Add();
}
inline void TrainerDesc::add_filelist(const ::std::string& value) {
  filelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.TrainerDesc.filelist)
}
inline void TrainerDesc::add_filelist(const char* value) {
  filelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.TrainerDesc.filelist)
}
inline void TrainerDesc::add_filelist(const char* value, size_t size) {
  filelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.TrainerDesc.filelist)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrainerDesc::filelist() const {
  // @@protoc_insertion_point(field_list:paddle.framework.TrainerDesc.filelist)
  return filelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrainerDesc::mutable_filelist() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.TrainerDesc.filelist)
  return &filelist_;
}

// optional bool debug = 6 [default = false];
inline bool TrainerDesc::has_debug() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrainerDesc::set_has_debug() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrainerDesc::clear_has_debug() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrainerDesc::clear_debug() {
  debug_ = false;
  clear_has_debug();
}
inline bool TrainerDesc::debug() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.debug)
  return debug_;
}
inline void TrainerDesc::set_debug(bool value) {
  set_has_debug();
  debug_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.debug)
}

// optional .paddle.framework.FetchConfig fetch_config = 7;
inline bool TrainerDesc::has_fetch_config() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrainerDesc::set_has_fetch_config() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrainerDesc::clear_has_fetch_config() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrainerDesc::clear_fetch_config() {
  if (fetch_config_ != NULL) fetch_config_->::paddle::framework::FetchConfig::Clear();
  clear_has_fetch_config();
}
inline const ::paddle::framework::FetchConfig& TrainerDesc::fetch_config() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.fetch_config)
  return fetch_config_ != NULL ? *fetch_config_
                         : *::paddle::framework::FetchConfig::internal_default_instance();
}
inline ::paddle::framework::FetchConfig* TrainerDesc::mutable_fetch_config() {
  set_has_fetch_config();
  if (fetch_config_ == NULL) {
    fetch_config_ = new ::paddle::framework::FetchConfig;
  }
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.fetch_config)
  return fetch_config_;
}
inline ::paddle::framework::FetchConfig* TrainerDesc::release_fetch_config() {
  // @@protoc_insertion_point(field_release:paddle.framework.TrainerDesc.fetch_config)
  clear_has_fetch_config();
  ::paddle::framework::FetchConfig* temp = fetch_config_;
  fetch_config_ = NULL;
  return temp;
}
inline void TrainerDesc::set_allocated_fetch_config(::paddle::framework::FetchConfig* fetch_config) {
  delete fetch_config_;
  fetch_config_ = fetch_config;
  if (fetch_config) {
    set_has_fetch_config();
  } else {
    clear_has_fetch_config();
  }
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.TrainerDesc.fetch_config)
}

// optional bool use_cvm = 8 [default = false];
inline bool TrainerDesc::has_use_cvm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrainerDesc::set_has_use_cvm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TrainerDesc::clear_has_use_cvm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TrainerDesc::clear_use_cvm() {
  use_cvm_ = false;
  clear_has_use_cvm();
}
inline bool TrainerDesc::use_cvm() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.use_cvm)
  return use_cvm_;
}
inline void TrainerDesc::set_use_cvm(bool value) {
  set_has_use_cvm();
  use_cvm_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.use_cvm)
}

// optional bool dump_slot = 9 [default = false];
inline bool TrainerDesc::has_dump_slot() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrainerDesc::set_has_dump_slot() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TrainerDesc::clear_has_dump_slot() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TrainerDesc::clear_dump_slot() {
  dump_slot_ = false;
  clear_has_dump_slot();
}
inline bool TrainerDesc::dump_slot() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.dump_slot)
  return dump_slot_;
}
inline void TrainerDesc::set_dump_slot(bool value) {
  set_has_dump_slot();
  dump_slot_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.dump_slot)
}

// optional float scale_datanorm = 10 [default = -1];
inline bool TrainerDesc::has_scale_datanorm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TrainerDesc::set_has_scale_datanorm() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TrainerDesc::clear_has_scale_datanorm() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TrainerDesc::clear_scale_datanorm() {
  scale_datanorm_ = -1;
  clear_has_scale_datanorm();
}
inline float TrainerDesc::scale_datanorm() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.scale_datanorm)
  return scale_datanorm_;
}
inline void TrainerDesc::set_scale_datanorm(float value) {
  set_has_scale_datanorm();
  scale_datanorm_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.scale_datanorm)
}

// optional int32 mpi_rank = 11 [default = -1];
inline bool TrainerDesc::has_mpi_rank() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TrainerDesc::set_has_mpi_rank() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TrainerDesc::clear_has_mpi_rank() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TrainerDesc::clear_mpi_rank() {
  mpi_rank_ = -1;
  clear_has_mpi_rank();
}
inline ::google::protobuf::int32 TrainerDesc::mpi_rank() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.mpi_rank)
  return mpi_rank_;
}
inline void TrainerDesc::set_mpi_rank(::google::protobuf::int32 value) {
  set_has_mpi_rank();
  mpi_rank_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.mpi_rank)
}

// optional string dump_fields_path = 12;
inline bool TrainerDesc::has_dump_fields_path() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TrainerDesc::set_has_dump_fields_path() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TrainerDesc::clear_has_dump_fields_path() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TrainerDesc::clear_dump_fields_path() {
  dump_fields_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dump_fields_path();
}
inline const ::std::string& TrainerDesc::dump_fields_path() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.dump_fields_path)
  return dump_fields_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainerDesc::set_dump_fields_path(const ::std::string& value) {
  set_has_dump_fields_path();
  dump_fields_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.dump_fields_path)
}
inline void TrainerDesc::set_dump_fields_path(const char* value) {
  set_has_dump_fields_path();
  dump_fields_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paddle.framework.TrainerDesc.dump_fields_path)
}
inline void TrainerDesc::set_dump_fields_path(const char* value, size_t size) {
  set_has_dump_fields_path();
  dump_fields_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TrainerDesc.dump_fields_path)
}
inline ::std::string* TrainerDesc::mutable_dump_fields_path() {
  set_has_dump_fields_path();
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.dump_fields_path)
  return dump_fields_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainerDesc::release_dump_fields_path() {
  // @@protoc_insertion_point(field_release:paddle.framework.TrainerDesc.dump_fields_path)
  clear_has_dump_fields_path();
  return dump_fields_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainerDesc::set_allocated_dump_fields_path(::std::string* dump_fields_path) {
  if (dump_fields_path != NULL) {
    set_has_dump_fields_path();
  } else {
    clear_has_dump_fields_path();
  }
  dump_fields_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dump_fields_path);
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.TrainerDesc.dump_fields_path)
}

// repeated string dump_fields = 13;
inline int TrainerDesc::dump_fields_size() const {
  return dump_fields_.size();
}
inline void TrainerDesc::clear_dump_fields() {
  dump_fields_.Clear();
}
inline const ::std::string& TrainerDesc::dump_fields(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.dump_fields)
  return dump_fields_.Get(index);
}
inline ::std::string* TrainerDesc::mutable_dump_fields(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.dump_fields)
  return dump_fields_.Mutable(index);
}
inline void TrainerDesc::set_dump_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.dump_fields)
  dump_fields_.Mutable(index)->assign(value);
}
inline void TrainerDesc::set_dump_fields(int index, const char* value) {
  dump_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.TrainerDesc.dump_fields)
}
inline void TrainerDesc::set_dump_fields(int index, const char* value, size_t size) {
  dump_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TrainerDesc.dump_fields)
}
inline ::std::string* TrainerDesc::add_dump_fields() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.TrainerDesc.dump_fields)
  return dump_fields_.Add();
}
inline void TrainerDesc::add_dump_fields(const ::std::string& value) {
  dump_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.TrainerDesc.dump_fields)
}
inline void TrainerDesc::add_dump_fields(const char* value) {
  dump_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.TrainerDesc.dump_fields)
}
inline void TrainerDesc::add_dump_fields(const char* value, size_t size) {
  dump_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.TrainerDesc.dump_fields)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrainerDesc::dump_fields() const {
  // @@protoc_insertion_point(field_list:paddle.framework.TrainerDesc.dump_fields)
  return dump_fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrainerDesc::mutable_dump_fields() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.TrainerDesc.dump_fields)
  return &dump_fields_;
}

// optional string dump_converter = 14;
inline bool TrainerDesc::has_dump_converter() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TrainerDesc::set_has_dump_converter() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TrainerDesc::clear_has_dump_converter() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TrainerDesc::clear_dump_converter() {
  dump_converter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dump_converter();
}
inline const ::std::string& TrainerDesc::dump_converter() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.dump_converter)
  return dump_converter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainerDesc::set_dump_converter(const ::std::string& value) {
  set_has_dump_converter();
  dump_converter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.dump_converter)
}
inline void TrainerDesc::set_dump_converter(const char* value) {
  set_has_dump_converter();
  dump_converter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paddle.framework.TrainerDesc.dump_converter)
}
inline void TrainerDesc::set_dump_converter(const char* value, size_t size) {
  set_has_dump_converter();
  dump_converter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TrainerDesc.dump_converter)
}
inline ::std::string* TrainerDesc::mutable_dump_converter() {
  set_has_dump_converter();
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.dump_converter)
  return dump_converter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainerDesc::release_dump_converter() {
  // @@protoc_insertion_point(field_release:paddle.framework.TrainerDesc.dump_converter)
  clear_has_dump_converter();
  return dump_converter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainerDesc::set_allocated_dump_converter(::std::string* dump_converter) {
  if (dump_converter != NULL) {
    set_has_dump_converter();
  } else {
    clear_has_dump_converter();
  }
  dump_converter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dump_converter);
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.TrainerDesc.dump_converter)
}

// repeated string dump_param = 15;
inline int TrainerDesc::dump_param_size() const {
  return dump_param_.size();
}
inline void TrainerDesc::clear_dump_param() {
  dump_param_.Clear();
}
inline const ::std::string& TrainerDesc::dump_param(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.dump_param)
  return dump_param_.Get(index);
}
inline ::std::string* TrainerDesc::mutable_dump_param(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.dump_param)
  return dump_param_.Mutable(index);
}
inline void TrainerDesc::set_dump_param(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.dump_param)
  dump_param_.Mutable(index)->assign(value);
}
inline void TrainerDesc::set_dump_param(int index, const char* value) {
  dump_param_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.TrainerDesc.dump_param)
}
inline void TrainerDesc::set_dump_param(int index, const char* value, size_t size) {
  dump_param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TrainerDesc.dump_param)
}
inline ::std::string* TrainerDesc::add_dump_param() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.TrainerDesc.dump_param)
  return dump_param_.Add();
}
inline void TrainerDesc::add_dump_param(const ::std::string& value) {
  dump_param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.TrainerDesc.dump_param)
}
inline void TrainerDesc::add_dump_param(const char* value) {
  dump_param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.TrainerDesc.dump_param)
}
inline void TrainerDesc::add_dump_param(const char* value, size_t size) {
  dump_param_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.TrainerDesc.dump_param)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrainerDesc::dump_param() const {
  // @@protoc_insertion_point(field_list:paddle.framework.TrainerDesc.dump_param)
  return dump_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrainerDesc::mutable_dump_param() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.TrainerDesc.dump_param)
  return &dump_param_;
}

// optional int32 mpi_size = 16 [default = -1];
inline bool TrainerDesc::has_mpi_size() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TrainerDesc::set_has_mpi_size() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TrainerDesc::clear_has_mpi_size() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TrainerDesc::clear_mpi_size() {
  mpi_size_ = -1;
  clear_has_mpi_size();
}
inline ::google::protobuf::int32 TrainerDesc::mpi_size() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.mpi_size)
  return mpi_size_;
}
inline void TrainerDesc::set_mpi_size(::google::protobuf::int32 value) {
  set_has_mpi_size();
  mpi_size_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.mpi_size)
}

// optional int32 dump_file_num = 17 [default = 16];
inline bool TrainerDesc::has_dump_file_num() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TrainerDesc::set_has_dump_file_num() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TrainerDesc::clear_has_dump_file_num() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TrainerDesc::clear_dump_file_num() {
  dump_file_num_ = 16;
  clear_has_dump_file_num();
}
inline ::google::protobuf::int32 TrainerDesc::dump_file_num() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.dump_file_num)
  return dump_file_num_;
}
inline void TrainerDesc::set_dump_file_num(::google::protobuf::int32 value) {
  set_has_dump_file_num();
  dump_file_num_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.dump_file_num)
}

// repeated string check_nan_var_names = 18;
inline int TrainerDesc::check_nan_var_names_size() const {
  return check_nan_var_names_.size();
}
inline void TrainerDesc::clear_check_nan_var_names() {
  check_nan_var_names_.Clear();
}
inline const ::std::string& TrainerDesc::check_nan_var_names(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.check_nan_var_names)
  return check_nan_var_names_.Get(index);
}
inline ::std::string* TrainerDesc::mutable_check_nan_var_names(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.check_nan_var_names)
  return check_nan_var_names_.Mutable(index);
}
inline void TrainerDesc::set_check_nan_var_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.check_nan_var_names)
  check_nan_var_names_.Mutable(index)->assign(value);
}
inline void TrainerDesc::set_check_nan_var_names(int index, const char* value) {
  check_nan_var_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.TrainerDesc.check_nan_var_names)
}
inline void TrainerDesc::set_check_nan_var_names(int index, const char* value, size_t size) {
  check_nan_var_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TrainerDesc.check_nan_var_names)
}
inline ::std::string* TrainerDesc::add_check_nan_var_names() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.TrainerDesc.check_nan_var_names)
  return check_nan_var_names_.Add();
}
inline void TrainerDesc::add_check_nan_var_names(const ::std::string& value) {
  check_nan_var_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.TrainerDesc.check_nan_var_names)
}
inline void TrainerDesc::add_check_nan_var_names(const char* value) {
  check_nan_var_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.TrainerDesc.check_nan_var_names)
}
inline void TrainerDesc::add_check_nan_var_names(const char* value, size_t size) {
  check_nan_var_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.TrainerDesc.check_nan_var_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrainerDesc::check_nan_var_names() const {
  // @@protoc_insertion_point(field_list:paddle.framework.TrainerDesc.check_nan_var_names)
  return check_nan_var_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrainerDesc::mutable_check_nan_var_names() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.TrainerDesc.check_nan_var_names)
  return &check_nan_var_names_;
}

// optional .paddle.framework.CopyTableConfig copy_table_config = 19;
inline bool TrainerDesc::has_copy_table_config() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TrainerDesc::set_has_copy_table_config() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TrainerDesc::clear_has_copy_table_config() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TrainerDesc::clear_copy_table_config() {
  if (copy_table_config_ != NULL) copy_table_config_->::paddle::framework::CopyTableConfig::Clear();
  clear_has_copy_table_config();
}
inline const ::paddle::framework::CopyTableConfig& TrainerDesc::copy_table_config() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.copy_table_config)
  return copy_table_config_ != NULL ? *copy_table_config_
                         : *::paddle::framework::CopyTableConfig::internal_default_instance();
}
inline ::paddle::framework::CopyTableConfig* TrainerDesc::mutable_copy_table_config() {
  set_has_copy_table_config();
  if (copy_table_config_ == NULL) {
    copy_table_config_ = new ::paddle::framework::CopyTableConfig;
  }
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.copy_table_config)
  return copy_table_config_;
}
inline ::paddle::framework::CopyTableConfig* TrainerDesc::release_copy_table_config() {
  // @@protoc_insertion_point(field_release:paddle.framework.TrainerDesc.copy_table_config)
  clear_has_copy_table_config();
  ::paddle::framework::CopyTableConfig* temp = copy_table_config_;
  copy_table_config_ = NULL;
  return temp;
}
inline void TrainerDesc::set_allocated_copy_table_config(::paddle::framework::CopyTableConfig* copy_table_config) {
  delete copy_table_config_;
  copy_table_config_ = copy_table_config;
  if (copy_table_config) {
    set_has_copy_table_config();
  } else {
    clear_has_copy_table_config();
  }
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.TrainerDesc.copy_table_config)
}

// optional .paddle.framework.AdjustInsWeightConfig adjust_ins_weight_config = 20;
inline bool TrainerDesc::has_adjust_ins_weight_config() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TrainerDesc::set_has_adjust_ins_weight_config() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TrainerDesc::clear_has_adjust_ins_weight_config() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TrainerDesc::clear_adjust_ins_weight_config() {
  if (adjust_ins_weight_config_ != NULL) adjust_ins_weight_config_->::paddle::framework::AdjustInsWeightConfig::Clear();
  clear_has_adjust_ins_weight_config();
}
inline const ::paddle::framework::AdjustInsWeightConfig& TrainerDesc::adjust_ins_weight_config() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.adjust_ins_weight_config)
  return adjust_ins_weight_config_ != NULL ? *adjust_ins_weight_config_
                         : *::paddle::framework::AdjustInsWeightConfig::internal_default_instance();
}
inline ::paddle::framework::AdjustInsWeightConfig* TrainerDesc::mutable_adjust_ins_weight_config() {
  set_has_adjust_ins_weight_config();
  if (adjust_ins_weight_config_ == NULL) {
    adjust_ins_weight_config_ = new ::paddle::framework::AdjustInsWeightConfig;
  }
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.adjust_ins_weight_config)
  return adjust_ins_weight_config_;
}
inline ::paddle::framework::AdjustInsWeightConfig* TrainerDesc::release_adjust_ins_weight_config() {
  // @@protoc_insertion_point(field_release:paddle.framework.TrainerDesc.adjust_ins_weight_config)
  clear_has_adjust_ins_weight_config();
  ::paddle::framework::AdjustInsWeightConfig* temp = adjust_ins_weight_config_;
  adjust_ins_weight_config_ = NULL;
  return temp;
}
inline void TrainerDesc::set_allocated_adjust_ins_weight_config(::paddle::framework::AdjustInsWeightConfig* adjust_ins_weight_config) {
  delete adjust_ins_weight_config_;
  adjust_ins_weight_config_ = adjust_ins_weight_config;
  if (adjust_ins_weight_config) {
    set_has_adjust_ins_weight_config();
  } else {
    clear_has_adjust_ins_weight_config();
  }
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.TrainerDesc.adjust_ins_weight_config)
}

// optional bool no_cvm = 21 [default = false];
inline bool TrainerDesc::has_no_cvm() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TrainerDesc::set_has_no_cvm() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TrainerDesc::clear_has_no_cvm() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TrainerDesc::clear_no_cvm() {
  no_cvm_ = false;
  clear_has_no_cvm();
}
inline bool TrainerDesc::no_cvm() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.no_cvm)
  return no_cvm_;
}
inline void TrainerDesc::set_no_cvm(bool value) {
  set_has_no_cvm();
  no_cvm_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.no_cvm)
}

// optional bool thread_barrier = 22;
inline bool TrainerDesc::has_thread_barrier() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TrainerDesc::set_has_thread_barrier() {
  _has_bits_[0] |= 0x00200000u;
}
inline void TrainerDesc::clear_has_thread_barrier() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void TrainerDesc::clear_thread_barrier() {
  thread_barrier_ = false;
  clear_has_thread_barrier();
}
inline bool TrainerDesc::thread_barrier() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.thread_barrier)
  return thread_barrier_;
}
inline void TrainerDesc::set_thread_barrier(bool value) {
  set_has_thread_barrier();
  thread_barrier_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.thread_barrier)
}

// repeated string loss_names = 23;
inline int TrainerDesc::loss_names_size() const {
  return loss_names_.size();
}
inline void TrainerDesc::clear_loss_names() {
  loss_names_.Clear();
}
inline const ::std::string& TrainerDesc::loss_names(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.loss_names)
  return loss_names_.Get(index);
}
inline ::std::string* TrainerDesc::mutable_loss_names(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.loss_names)
  return loss_names_.Mutable(index);
}
inline void TrainerDesc::set_loss_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.loss_names)
  loss_names_.Mutable(index)->assign(value);
}
inline void TrainerDesc::set_loss_names(int index, const char* value) {
  loss_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.TrainerDesc.loss_names)
}
inline void TrainerDesc::set_loss_names(int index, const char* value, size_t size) {
  loss_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TrainerDesc.loss_names)
}
inline ::std::string* TrainerDesc::add_loss_names() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.TrainerDesc.loss_names)
  return loss_names_.Add();
}
inline void TrainerDesc::add_loss_names(const ::std::string& value) {
  loss_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.TrainerDesc.loss_names)
}
inline void TrainerDesc::add_loss_names(const char* value) {
  loss_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.TrainerDesc.loss_names)
}
inline void TrainerDesc::add_loss_names(const char* value, size_t size) {
  loss_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.TrainerDesc.loss_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrainerDesc::loss_names() const {
  // @@protoc_insertion_point(field_list:paddle.framework.TrainerDesc.loss_names)
  return loss_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrainerDesc::mutable_loss_names() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.TrainerDesc.loss_names)
  return &loss_names_;
}

// optional bool enable_random_dump = 24 [default = false];
inline bool TrainerDesc::has_enable_random_dump() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TrainerDesc::set_has_enable_random_dump() {
  _has_bits_[0] |= 0x00800000u;
}
inline void TrainerDesc::clear_has_enable_random_dump() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void TrainerDesc::clear_enable_random_dump() {
  enable_random_dump_ = false;
  clear_has_enable_random_dump();
}
inline bool TrainerDesc::enable_random_dump() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.enable_random_dump)
  return enable_random_dump_;
}
inline void TrainerDesc::set_enable_random_dump(bool value) {
  set_has_enable_random_dump();
  enable_random_dump_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.enable_random_dump)
}

// optional bool random_with_lineid = 25 [default = false];
inline bool TrainerDesc::has_random_with_lineid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TrainerDesc::set_has_random_with_lineid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void TrainerDesc::clear_has_random_with_lineid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void TrainerDesc::clear_random_with_lineid() {
  random_with_lineid_ = false;
  clear_has_random_with_lineid();
}
inline bool TrainerDesc::random_with_lineid() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.random_with_lineid)
  return random_with_lineid_;
}
inline void TrainerDesc::set_random_with_lineid(bool value) {
  set_has_random_with_lineid();
  random_with_lineid_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.random_with_lineid)
}

// optional int32 dump_interval = 26 [default = 10000];
inline bool TrainerDesc::has_dump_interval() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void TrainerDesc::set_has_dump_interval() {
  _has_bits_[0] |= 0x02000000u;
}
inline void TrainerDesc::clear_has_dump_interval() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void TrainerDesc::clear_dump_interval() {
  dump_interval_ = 10000;
  clear_has_dump_interval();
}
inline ::google::protobuf::int32 TrainerDesc::dump_interval() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.dump_interval)
  return dump_interval_;
}
inline void TrainerDesc::set_dump_interval(::google::protobuf::int32 value) {
  set_has_dump_interval();
  dump_interval_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.dump_interval)
}

// repeated int32 worker_places = 27;
inline int TrainerDesc::worker_places_size() const {
  return worker_places_.size();
}
inline void TrainerDesc::clear_worker_places() {
  worker_places_.Clear();
}
inline ::google::protobuf::int32 TrainerDesc::worker_places(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.worker_places)
  return worker_places_.Get(index);
}
inline void TrainerDesc::set_worker_places(int index, ::google::protobuf::int32 value) {
  worker_places_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.worker_places)
}
inline void TrainerDesc::add_worker_places(::google::protobuf::int32 value) {
  worker_places_.Add(value);
  // @@protoc_insertion_point(field_add:paddle.framework.TrainerDesc.worker_places)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TrainerDesc::worker_places() const {
  // @@protoc_insertion_point(field_list:paddle.framework.TrainerDesc.worker_places)
  return worker_places_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TrainerDesc::mutable_worker_places() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.TrainerDesc.worker_places)
  return &worker_places_;
}

// repeated string xpu_send_list = 28;
inline int TrainerDesc::xpu_send_list_size() const {
  return xpu_send_list_.size();
}
inline void TrainerDesc::clear_xpu_send_list() {
  xpu_send_list_.Clear();
}
inline const ::std::string& TrainerDesc::xpu_send_list(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.xpu_send_list)
  return xpu_send_list_.Get(index);
}
inline ::std::string* TrainerDesc::mutable_xpu_send_list(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.xpu_send_list)
  return xpu_send_list_.Mutable(index);
}
inline void TrainerDesc::set_xpu_send_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.xpu_send_list)
  xpu_send_list_.Mutable(index)->assign(value);
}
inline void TrainerDesc::set_xpu_send_list(int index, const char* value) {
  xpu_send_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.TrainerDesc.xpu_send_list)
}
inline void TrainerDesc::set_xpu_send_list(int index, const char* value, size_t size) {
  xpu_send_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TrainerDesc.xpu_send_list)
}
inline ::std::string* TrainerDesc::add_xpu_send_list() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.TrainerDesc.xpu_send_list)
  return xpu_send_list_.Add();
}
inline void TrainerDesc::add_xpu_send_list(const ::std::string& value) {
  xpu_send_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.TrainerDesc.xpu_send_list)
}
inline void TrainerDesc::add_xpu_send_list(const char* value) {
  xpu_send_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.TrainerDesc.xpu_send_list)
}
inline void TrainerDesc::add_xpu_send_list(const char* value, size_t size) {
  xpu_send_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.TrainerDesc.xpu_send_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrainerDesc::xpu_send_list() const {
  // @@protoc_insertion_point(field_list:paddle.framework.TrainerDesc.xpu_send_list)
  return xpu_send_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrainerDesc::mutable_xpu_send_list() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.TrainerDesc.xpu_send_list)
  return &xpu_send_list_;
}

// repeated string xpu_recv_list = 29;
inline int TrainerDesc::xpu_recv_list_size() const {
  return xpu_recv_list_.size();
}
inline void TrainerDesc::clear_xpu_recv_list() {
  xpu_recv_list_.Clear();
}
inline const ::std::string& TrainerDesc::xpu_recv_list(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.xpu_recv_list)
  return xpu_recv_list_.Get(index);
}
inline ::std::string* TrainerDesc::mutable_xpu_recv_list(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.xpu_recv_list)
  return xpu_recv_list_.Mutable(index);
}
inline void TrainerDesc::set_xpu_recv_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.xpu_recv_list)
  xpu_recv_list_.Mutable(index)->assign(value);
}
inline void TrainerDesc::set_xpu_recv_list(int index, const char* value) {
  xpu_recv_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.TrainerDesc.xpu_recv_list)
}
inline void TrainerDesc::set_xpu_recv_list(int index, const char* value, size_t size) {
  xpu_recv_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TrainerDesc.xpu_recv_list)
}
inline ::std::string* TrainerDesc::add_xpu_recv_list() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.TrainerDesc.xpu_recv_list)
  return xpu_recv_list_.Add();
}
inline void TrainerDesc::add_xpu_recv_list(const ::std::string& value) {
  xpu_recv_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.TrainerDesc.xpu_recv_list)
}
inline void TrainerDesc::add_xpu_recv_list(const char* value) {
  xpu_recv_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.TrainerDesc.xpu_recv_list)
}
inline void TrainerDesc::add_xpu_recv_list(const char* value, size_t size) {
  xpu_recv_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.TrainerDesc.xpu_recv_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrainerDesc::xpu_recv_list() const {
  // @@protoc_insertion_point(field_list:paddle.framework.TrainerDesc.xpu_recv_list)
  return xpu_recv_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrainerDesc::mutable_xpu_recv_list() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.TrainerDesc.xpu_recv_list)
  return &xpu_recv_list_;
}

// optional int32 xpu_start_idx = 30;
inline bool TrainerDesc::has_xpu_start_idx() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void TrainerDesc::set_has_xpu_start_idx() {
  _has_bits_[0] |= 0x20000000u;
}
inline void TrainerDesc::clear_has_xpu_start_idx() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void TrainerDesc::clear_xpu_start_idx() {
  xpu_start_idx_ = 0;
  clear_has_xpu_start_idx();
}
inline ::google::protobuf::int32 TrainerDesc::xpu_start_idx() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.xpu_start_idx)
  return xpu_start_idx_;
}
inline void TrainerDesc::set_xpu_start_idx(::google::protobuf::int32 value) {
  set_has_xpu_start_idx();
  xpu_start_idx_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.xpu_start_idx)
}

// optional int32 xpu_end_idx = 31;
inline bool TrainerDesc::has_xpu_end_idx() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void TrainerDesc::set_has_xpu_end_idx() {
  _has_bits_[0] |= 0x40000000u;
}
inline void TrainerDesc::clear_has_xpu_end_idx() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void TrainerDesc::clear_xpu_end_idx() {
  xpu_end_idx_ = 0;
  clear_has_xpu_end_idx();
}
inline ::google::protobuf::int32 TrainerDesc::xpu_end_idx() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.xpu_end_idx)
  return xpu_end_idx_;
}
inline void TrainerDesc::set_xpu_end_idx(::google::protobuf::int32 value) {
  set_has_xpu_end_idx();
  xpu_end_idx_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.xpu_end_idx)
}

// optional bool use_ps_gpu = 32 [default = false];
inline bool TrainerDesc::has_use_ps_gpu() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void TrainerDesc::set_has_use_ps_gpu() {
  _has_bits_[0] |= 0x80000000u;
}
inline void TrainerDesc::clear_has_use_ps_gpu() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void TrainerDesc::clear_use_ps_gpu() {
  use_ps_gpu_ = false;
  clear_has_use_ps_gpu();
}
inline bool TrainerDesc::use_ps_gpu() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.use_ps_gpu)
  return use_ps_gpu_;
}
inline void TrainerDesc::set_use_ps_gpu(bool value) {
  set_has_use_ps_gpu();
  use_ps_gpu_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.use_ps_gpu)
}

// optional string user_define_dump_filename = 33;
inline bool TrainerDesc::has_user_define_dump_filename() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void TrainerDesc::set_has_user_define_dump_filename() {
  _has_bits_[1] |= 0x00000001u;
}
inline void TrainerDesc::clear_has_user_define_dump_filename() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void TrainerDesc::clear_user_define_dump_filename() {
  user_define_dump_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_define_dump_filename();
}
inline const ::std::string& TrainerDesc::user_define_dump_filename() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.user_define_dump_filename)
  return user_define_dump_filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainerDesc::set_user_define_dump_filename(const ::std::string& value) {
  set_has_user_define_dump_filename();
  user_define_dump_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.user_define_dump_filename)
}
inline void TrainerDesc::set_user_define_dump_filename(const char* value) {
  set_has_user_define_dump_filename();
  user_define_dump_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paddle.framework.TrainerDesc.user_define_dump_filename)
}
inline void TrainerDesc::set_user_define_dump_filename(const char* value, size_t size) {
  set_has_user_define_dump_filename();
  user_define_dump_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TrainerDesc.user_define_dump_filename)
}
inline ::std::string* TrainerDesc::mutable_user_define_dump_filename() {
  set_has_user_define_dump_filename();
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.user_define_dump_filename)
  return user_define_dump_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainerDesc::release_user_define_dump_filename() {
  // @@protoc_insertion_point(field_release:paddle.framework.TrainerDesc.user_define_dump_filename)
  clear_has_user_define_dump_filename();
  return user_define_dump_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainerDesc::set_allocated_user_define_dump_filename(::std::string* user_define_dump_filename) {
  if (user_define_dump_filename != NULL) {
    set_has_user_define_dump_filename();
  } else {
    clear_has_user_define_dump_filename();
  }
  user_define_dump_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_define_dump_filename);
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.TrainerDesc.user_define_dump_filename)
}

// optional bool scale_sparse_gradient_with_batch_size = 34 [default = true];
inline bool TrainerDesc::has_scale_sparse_gradient_with_batch_size() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void TrainerDesc::set_has_scale_sparse_gradient_with_batch_size() {
  _has_bits_[1] |= 0x00000002u;
}
inline void TrainerDesc::clear_has_scale_sparse_gradient_with_batch_size() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void TrainerDesc::clear_scale_sparse_gradient_with_batch_size() {
  scale_sparse_gradient_with_batch_size_ = true;
  clear_has_scale_sparse_gradient_with_batch_size();
}
inline bool TrainerDesc::scale_sparse_gradient_with_batch_size() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.scale_sparse_gradient_with_batch_size)
  return scale_sparse_gradient_with_batch_size_;
}
inline void TrainerDesc::set_scale_sparse_gradient_with_batch_size(bool value) {
  set_has_scale_sparse_gradient_with_batch_size();
  scale_sparse_gradient_with_batch_size_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.scale_sparse_gradient_with_batch_size)
}

// repeated int32 trainers = 35;
inline int TrainerDesc::trainers_size() const {
  return trainers_.size();
}
inline void TrainerDesc::clear_trainers() {
  trainers_.Clear();
}
inline ::google::protobuf::int32 TrainerDesc::trainers(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.trainers)
  return trainers_.Get(index);
}
inline void TrainerDesc::set_trainers(int index, ::google::protobuf::int32 value) {
  trainers_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.trainers)
}
inline void TrainerDesc::add_trainers(::google::protobuf::int32 value) {
  trainers_.Add(value);
  // @@protoc_insertion_point(field_add:paddle.framework.TrainerDesc.trainers)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TrainerDesc::trainers() const {
  // @@protoc_insertion_point(field_list:paddle.framework.TrainerDesc.trainers)
  return trainers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TrainerDesc::mutable_trainers() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.TrainerDesc.trainers)
  return &trainers_;
}

// optional int32 trainer_id = 36;
inline bool TrainerDesc::has_trainer_id() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void TrainerDesc::set_has_trainer_id() {
  _has_bits_[1] |= 0x00000008u;
}
inline void TrainerDesc::clear_has_trainer_id() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void TrainerDesc::clear_trainer_id() {
  trainer_id_ = 0;
  clear_has_trainer_id();
}
inline ::google::protobuf::int32 TrainerDesc::trainer_id() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.trainer_id)
  return trainer_id_;
}
inline void TrainerDesc::set_trainer_id(::google::protobuf::int32 value) {
  set_has_trainer_id();
  trainer_id_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.trainer_id)
}

// optional string fleet_desc = 37;
inline bool TrainerDesc::has_fleet_desc() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void TrainerDesc::set_has_fleet_desc() {
  _has_bits_[1] |= 0x00000010u;
}
inline void TrainerDesc::clear_has_fleet_desc() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void TrainerDesc::clear_fleet_desc() {
  fleet_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fleet_desc();
}
inline const ::std::string& TrainerDesc::fleet_desc() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.fleet_desc)
  return fleet_desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainerDesc::set_fleet_desc(const ::std::string& value) {
  set_has_fleet_desc();
  fleet_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.fleet_desc)
}
inline void TrainerDesc::set_fleet_desc(const char* value) {
  set_has_fleet_desc();
  fleet_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paddle.framework.TrainerDesc.fleet_desc)
}
inline void TrainerDesc::set_fleet_desc(const char* value, size_t size) {
  set_has_fleet_desc();
  fleet_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TrainerDesc.fleet_desc)
}
inline ::std::string* TrainerDesc::mutable_fleet_desc() {
  set_has_fleet_desc();
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.fleet_desc)
  return fleet_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainerDesc::release_fleet_desc() {
  // @@protoc_insertion_point(field_release:paddle.framework.TrainerDesc.fleet_desc)
  clear_has_fleet_desc();
  return fleet_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainerDesc::set_allocated_fleet_desc(::std::string* fleet_desc) {
  if (fleet_desc != NULL) {
    set_has_fleet_desc();
  } else {
    clear_has_fleet_desc();
  }
  fleet_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_desc);
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.TrainerDesc.fleet_desc)
}

// optional bool is_dump_in_simple_mode = 38 [default = false];
inline bool TrainerDesc::has_is_dump_in_simple_mode() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void TrainerDesc::set_has_is_dump_in_simple_mode() {
  _has_bits_[1] |= 0x00000020u;
}
inline void TrainerDesc::clear_has_is_dump_in_simple_mode() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void TrainerDesc::clear_is_dump_in_simple_mode() {
  is_dump_in_simple_mode_ = false;
  clear_has_is_dump_in_simple_mode();
}
inline bool TrainerDesc::is_dump_in_simple_mode() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.is_dump_in_simple_mode)
  return is_dump_in_simple_mode_;
}
inline void TrainerDesc::set_is_dump_in_simple_mode(bool value) {
  set_has_is_dump_in_simple_mode();
  is_dump_in_simple_mode_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TrainerDesc.is_dump_in_simple_mode)
}

// optional .paddle.framework.HogwildWorkerParameter hogwild_param = 101;
inline bool TrainerDesc::has_hogwild_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void TrainerDesc::set_has_hogwild_param() {
  _has_bits_[1] |= 0x00000040u;
}
inline void TrainerDesc::clear_has_hogwild_param() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void TrainerDesc::clear_hogwild_param() {
  if (hogwild_param_ != NULL) hogwild_param_->::paddle::framework::HogwildWorkerParameter::Clear();
  clear_has_hogwild_param();
}
inline const ::paddle::framework::HogwildWorkerParameter& TrainerDesc::hogwild_param() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.hogwild_param)
  return hogwild_param_ != NULL ? *hogwild_param_
                         : *::paddle::framework::HogwildWorkerParameter::internal_default_instance();
}
inline ::paddle::framework::HogwildWorkerParameter* TrainerDesc::mutable_hogwild_param() {
  set_has_hogwild_param();
  if (hogwild_param_ == NULL) {
    hogwild_param_ = new ::paddle::framework::HogwildWorkerParameter;
  }
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.hogwild_param)
  return hogwild_param_;
}
inline ::paddle::framework::HogwildWorkerParameter* TrainerDesc::release_hogwild_param() {
  // @@protoc_insertion_point(field_release:paddle.framework.TrainerDesc.hogwild_param)
  clear_has_hogwild_param();
  ::paddle::framework::HogwildWorkerParameter* temp = hogwild_param_;
  hogwild_param_ = NULL;
  return temp;
}
inline void TrainerDesc::set_allocated_hogwild_param(::paddle::framework::HogwildWorkerParameter* hogwild_param) {
  delete hogwild_param_;
  hogwild_param_ = hogwild_param;
  if (hogwild_param) {
    set_has_hogwild_param();
  } else {
    clear_has_hogwild_param();
  }
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.TrainerDesc.hogwild_param)
}

// optional .paddle.framework.DownpourWorkerParameter downpour_param = 103;
inline bool TrainerDesc::has_downpour_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void TrainerDesc::set_has_downpour_param() {
  _has_bits_[1] |= 0x00000080u;
}
inline void TrainerDesc::clear_has_downpour_param() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void TrainerDesc::clear_downpour_param() {
  if (downpour_param_ != NULL) downpour_param_->::paddle::framework::DownpourWorkerParameter::Clear();
  clear_has_downpour_param();
}
inline const ::paddle::framework::DownpourWorkerParameter& TrainerDesc::downpour_param() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.downpour_param)
  return downpour_param_ != NULL ? *downpour_param_
                         : *::paddle::framework::DownpourWorkerParameter::internal_default_instance();
}
inline ::paddle::framework::DownpourWorkerParameter* TrainerDesc::mutable_downpour_param() {
  set_has_downpour_param();
  if (downpour_param_ == NULL) {
    downpour_param_ = new ::paddle::framework::DownpourWorkerParameter;
  }
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.downpour_param)
  return downpour_param_;
}
inline ::paddle::framework::DownpourWorkerParameter* TrainerDesc::release_downpour_param() {
  // @@protoc_insertion_point(field_release:paddle.framework.TrainerDesc.downpour_param)
  clear_has_downpour_param();
  ::paddle::framework::DownpourWorkerParameter* temp = downpour_param_;
  downpour_param_ = NULL;
  return temp;
}
inline void TrainerDesc::set_allocated_downpour_param(::paddle::framework::DownpourWorkerParameter* downpour_param) {
  delete downpour_param_;
  downpour_param_ = downpour_param;
  if (downpour_param) {
    set_has_downpour_param();
  } else {
    clear_has_downpour_param();
  }
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.TrainerDesc.downpour_param)
}

// optional .paddle.framework.PullDenseWorkerParameter pull_dense_param = 102;
inline bool TrainerDesc::has_pull_dense_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void TrainerDesc::set_has_pull_dense_param() {
  _has_bits_[1] |= 0x00000100u;
}
inline void TrainerDesc::clear_has_pull_dense_param() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void TrainerDesc::clear_pull_dense_param() {
  if (pull_dense_param_ != NULL) pull_dense_param_->::paddle::framework::PullDenseWorkerParameter::Clear();
  clear_has_pull_dense_param();
}
inline const ::paddle::framework::PullDenseWorkerParameter& TrainerDesc::pull_dense_param() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.pull_dense_param)
  return pull_dense_param_ != NULL ? *pull_dense_param_
                         : *::paddle::framework::PullDenseWorkerParameter::internal_default_instance();
}
inline ::paddle::framework::PullDenseWorkerParameter* TrainerDesc::mutable_pull_dense_param() {
  set_has_pull_dense_param();
  if (pull_dense_param_ == NULL) {
    pull_dense_param_ = new ::paddle::framework::PullDenseWorkerParameter;
  }
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.pull_dense_param)
  return pull_dense_param_;
}
inline ::paddle::framework::PullDenseWorkerParameter* TrainerDesc::release_pull_dense_param() {
  // @@protoc_insertion_point(field_release:paddle.framework.TrainerDesc.pull_dense_param)
  clear_has_pull_dense_param();
  ::paddle::framework::PullDenseWorkerParameter* temp = pull_dense_param_;
  pull_dense_param_ = NULL;
  return temp;
}
inline void TrainerDesc::set_allocated_pull_dense_param(::paddle::framework::PullDenseWorkerParameter* pull_dense_param) {
  delete pull_dense_param_;
  pull_dense_param_ = pull_dense_param;
  if (pull_dense_param) {
    set_has_pull_dense_param();
  } else {
    clear_has_pull_dense_param();
  }
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.TrainerDesc.pull_dense_param)
}

// optional .paddle.framework.SectionWorkerParameter section_param = 104;
inline bool TrainerDesc::has_section_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void TrainerDesc::set_has_section_param() {
  _has_bits_[1] |= 0x00000200u;
}
inline void TrainerDesc::clear_has_section_param() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void TrainerDesc::clear_section_param() {
  if (section_param_ != NULL) section_param_->::paddle::framework::SectionWorkerParameter::Clear();
  clear_has_section_param();
}
inline const ::paddle::framework::SectionWorkerParameter& TrainerDesc::section_param() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.section_param)
  return section_param_ != NULL ? *section_param_
                         : *::paddle::framework::SectionWorkerParameter::internal_default_instance();
}
inline ::paddle::framework::SectionWorkerParameter* TrainerDesc::mutable_section_param() {
  set_has_section_param();
  if (section_param_ == NULL) {
    section_param_ = new ::paddle::framework::SectionWorkerParameter;
  }
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.section_param)
  return section_param_;
}
inline ::paddle::framework::SectionWorkerParameter* TrainerDesc::release_section_param() {
  // @@protoc_insertion_point(field_release:paddle.framework.TrainerDesc.section_param)
  clear_has_section_param();
  ::paddle::framework::SectionWorkerParameter* temp = section_param_;
  section_param_ = NULL;
  return temp;
}
inline void TrainerDesc::set_allocated_section_param(::paddle::framework::SectionWorkerParameter* section_param) {
  delete section_param_;
  section_param_ = section_param;
  if (section_param) {
    set_has_section_param();
  } else {
    clear_has_section_param();
  }
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.TrainerDesc.section_param)
}

// optional .paddle.framework.HeterSectionWorkerParameter heter_section_param = 105;
inline bool TrainerDesc::has_heter_section_param() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void TrainerDesc::set_has_heter_section_param() {
  _has_bits_[1] |= 0x00000400u;
}
inline void TrainerDesc::clear_has_heter_section_param() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void TrainerDesc::clear_heter_section_param() {
  if (heter_section_param_ != NULL) heter_section_param_->::paddle::framework::HeterSectionWorkerParameter::Clear();
  clear_has_heter_section_param();
}
inline const ::paddle::framework::HeterSectionWorkerParameter& TrainerDesc::heter_section_param() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.heter_section_param)
  return heter_section_param_ != NULL ? *heter_section_param_
                         : *::paddle::framework::HeterSectionWorkerParameter::internal_default_instance();
}
inline ::paddle::framework::HeterSectionWorkerParameter* TrainerDesc::mutable_heter_section_param() {
  set_has_heter_section_param();
  if (heter_section_param_ == NULL) {
    heter_section_param_ = new ::paddle::framework::HeterSectionWorkerParameter;
  }
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.heter_section_param)
  return heter_section_param_;
}
inline ::paddle::framework::HeterSectionWorkerParameter* TrainerDesc::release_heter_section_param() {
  // @@protoc_insertion_point(field_release:paddle.framework.TrainerDesc.heter_section_param)
  clear_has_heter_section_param();
  ::paddle::framework::HeterSectionWorkerParameter* temp = heter_section_param_;
  heter_section_param_ = NULL;
  return temp;
}
inline void TrainerDesc::set_allocated_heter_section_param(::paddle::framework::HeterSectionWorkerParameter* heter_section_param) {
  delete heter_section_param_;
  heter_section_param_ = heter_section_param;
  if (heter_section_param) {
    set_has_heter_section_param();
  } else {
    clear_has_heter_section_param();
  }
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.TrainerDesc.heter_section_param)
}

// optional .paddle.framework.DataFeedDesc data_desc = 201;
inline bool TrainerDesc::has_data_desc() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void TrainerDesc::set_has_data_desc() {
  _has_bits_[1] |= 0x00000800u;
}
inline void TrainerDesc::clear_has_data_desc() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void TrainerDesc::clear_data_desc() {
  if (data_desc_ != NULL) data_desc_->::paddle::framework::DataFeedDesc::Clear();
  clear_has_data_desc();
}
inline const ::paddle::framework::DataFeedDesc& TrainerDesc::data_desc() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TrainerDesc.data_desc)
  return data_desc_ != NULL ? *data_desc_
                         : *::paddle::framework::DataFeedDesc::internal_default_instance();
}
inline ::paddle::framework::DataFeedDesc* TrainerDesc::mutable_data_desc() {
  set_has_data_desc();
  if (data_desc_ == NULL) {
    data_desc_ = new ::paddle::framework::DataFeedDesc;
  }
  // @@protoc_insertion_point(field_mutable:paddle.framework.TrainerDesc.data_desc)
  return data_desc_;
}
inline ::paddle::framework::DataFeedDesc* TrainerDesc::release_data_desc() {
  // @@protoc_insertion_point(field_release:paddle.framework.TrainerDesc.data_desc)
  clear_has_data_desc();
  ::paddle::framework::DataFeedDesc* temp = data_desc_;
  data_desc_ = NULL;
  return temp;
}
inline void TrainerDesc::set_allocated_data_desc(::paddle::framework::DataFeedDesc* data_desc) {
  delete data_desc_;
  data_desc_ = data_desc;
  if (data_desc) {
    set_has_data_desc();
  } else {
    clear_has_data_desc();
  }
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.TrainerDesc.data_desc)
}

inline const TrainerDesc* TrainerDesc::internal_default_instance() {
  return &TrainerDesc_default_instance_.get();
}
// -------------------------------------------------------------------

// HogwildWorkerParameter

// repeated string skip_ops = 1;
inline int HogwildWorkerParameter::skip_ops_size() const {
  return skip_ops_.size();
}
inline void HogwildWorkerParameter::clear_skip_ops() {
  skip_ops_.Clear();
}
inline const ::std::string& HogwildWorkerParameter::skip_ops(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.HogwildWorkerParameter.skip_ops)
  return skip_ops_.Get(index);
}
inline ::std::string* HogwildWorkerParameter::mutable_skip_ops(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.HogwildWorkerParameter.skip_ops)
  return skip_ops_.Mutable(index);
}
inline void HogwildWorkerParameter::set_skip_ops(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.HogwildWorkerParameter.skip_ops)
  skip_ops_.Mutable(index)->assign(value);
}
inline void HogwildWorkerParameter::set_skip_ops(int index, const char* value) {
  skip_ops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.HogwildWorkerParameter.skip_ops)
}
inline void HogwildWorkerParameter::set_skip_ops(int index, const char* value, size_t size) {
  skip_ops_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.HogwildWorkerParameter.skip_ops)
}
inline ::std::string* HogwildWorkerParameter::add_skip_ops() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.HogwildWorkerParameter.skip_ops)
  return skip_ops_.Add();
}
inline void HogwildWorkerParameter::add_skip_ops(const ::std::string& value) {
  skip_ops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.HogwildWorkerParameter.skip_ops)
}
inline void HogwildWorkerParameter::add_skip_ops(const char* value) {
  skip_ops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.HogwildWorkerParameter.skip_ops)
}
inline void HogwildWorkerParameter::add_skip_ops(const char* value, size_t size) {
  skip_ops_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.HogwildWorkerParameter.skip_ops)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HogwildWorkerParameter::skip_ops() const {
  // @@protoc_insertion_point(field_list:paddle.framework.HogwildWorkerParameter.skip_ops)
  return skip_ops_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HogwildWorkerParameter::mutable_skip_ops() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.HogwildWorkerParameter.skip_ops)
  return &skip_ops_;
}

// repeated string stat_var_names = 2;
inline int HogwildWorkerParameter::stat_var_names_size() const {
  return stat_var_names_.size();
}
inline void HogwildWorkerParameter::clear_stat_var_names() {
  stat_var_names_.Clear();
}
inline const ::std::string& HogwildWorkerParameter::stat_var_names(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.HogwildWorkerParameter.stat_var_names)
  return stat_var_names_.Get(index);
}
inline ::std::string* HogwildWorkerParameter::mutable_stat_var_names(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.HogwildWorkerParameter.stat_var_names)
  return stat_var_names_.Mutable(index);
}
inline void HogwildWorkerParameter::set_stat_var_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.HogwildWorkerParameter.stat_var_names)
  stat_var_names_.Mutable(index)->assign(value);
}
inline void HogwildWorkerParameter::set_stat_var_names(int index, const char* value) {
  stat_var_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.HogwildWorkerParameter.stat_var_names)
}
inline void HogwildWorkerParameter::set_stat_var_names(int index, const char* value, size_t size) {
  stat_var_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.HogwildWorkerParameter.stat_var_names)
}
inline ::std::string* HogwildWorkerParameter::add_stat_var_names() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.HogwildWorkerParameter.stat_var_names)
  return stat_var_names_.Add();
}
inline void HogwildWorkerParameter::add_stat_var_names(const ::std::string& value) {
  stat_var_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.HogwildWorkerParameter.stat_var_names)
}
inline void HogwildWorkerParameter::add_stat_var_names(const char* value) {
  stat_var_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.HogwildWorkerParameter.stat_var_names)
}
inline void HogwildWorkerParameter::add_stat_var_names(const char* value, size_t size) {
  stat_var_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.HogwildWorkerParameter.stat_var_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HogwildWorkerParameter::stat_var_names() const {
  // @@protoc_insertion_point(field_list:paddle.framework.HogwildWorkerParameter.stat_var_names)
  return stat_var_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HogwildWorkerParameter::mutable_stat_var_names() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.HogwildWorkerParameter.stat_var_names)
  return &stat_var_names_;
}

inline const HogwildWorkerParameter* HogwildWorkerParameter::internal_default_instance() {
  return &HogwildWorkerParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// DownpourWorkerParameter

// repeated .paddle.framework.TableParameter sparse_table = 1;
inline int DownpourWorkerParameter::sparse_table_size() const {
  return sparse_table_.size();
}
inline void DownpourWorkerParameter::clear_sparse_table() {
  sparse_table_.Clear();
}
inline const ::paddle::framework::TableParameter& DownpourWorkerParameter::sparse_table(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.DownpourWorkerParameter.sparse_table)
  return sparse_table_.Get(index);
}
inline ::paddle::framework::TableParameter* DownpourWorkerParameter::mutable_sparse_table(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.DownpourWorkerParameter.sparse_table)
  return sparse_table_.Mutable(index);
}
inline ::paddle::framework::TableParameter* DownpourWorkerParameter::add_sparse_table() {
  // @@protoc_insertion_point(field_add:paddle.framework.DownpourWorkerParameter.sparse_table)
  return sparse_table_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableParameter >*
DownpourWorkerParameter::mutable_sparse_table() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.DownpourWorkerParameter.sparse_table)
  return &sparse_table_;
}
inline const ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableParameter >&
DownpourWorkerParameter::sparse_table() const {
  // @@protoc_insertion_point(field_list:paddle.framework.DownpourWorkerParameter.sparse_table)
  return sparse_table_;
}

// repeated .paddle.framework.TableParameter dense_table = 2;
inline int DownpourWorkerParameter::dense_table_size() const {
  return dense_table_.size();
}
inline void DownpourWorkerParameter::clear_dense_table() {
  dense_table_.Clear();
}
inline const ::paddle::framework::TableParameter& DownpourWorkerParameter::dense_table(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.DownpourWorkerParameter.dense_table)
  return dense_table_.Get(index);
}
inline ::paddle::framework::TableParameter* DownpourWorkerParameter::mutable_dense_table(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.DownpourWorkerParameter.dense_table)
  return dense_table_.Mutable(index);
}
inline ::paddle::framework::TableParameter* DownpourWorkerParameter::add_dense_table() {
  // @@protoc_insertion_point(field_add:paddle.framework.DownpourWorkerParameter.dense_table)
  return dense_table_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableParameter >*
DownpourWorkerParameter::mutable_dense_table() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.DownpourWorkerParameter.dense_table)
  return &dense_table_;
}
inline const ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableParameter >&
DownpourWorkerParameter::dense_table() const {
  // @@protoc_insertion_point(field_list:paddle.framework.DownpourWorkerParameter.dense_table)
  return dense_table_;
}

// repeated string skip_ops = 3;
inline int DownpourWorkerParameter::skip_ops_size() const {
  return skip_ops_.size();
}
inline void DownpourWorkerParameter::clear_skip_ops() {
  skip_ops_.Clear();
}
inline const ::std::string& DownpourWorkerParameter::skip_ops(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.DownpourWorkerParameter.skip_ops)
  return skip_ops_.Get(index);
}
inline ::std::string* DownpourWorkerParameter::mutable_skip_ops(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.DownpourWorkerParameter.skip_ops)
  return skip_ops_.Mutable(index);
}
inline void DownpourWorkerParameter::set_skip_ops(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.DownpourWorkerParameter.skip_ops)
  skip_ops_.Mutable(index)->assign(value);
}
inline void DownpourWorkerParameter::set_skip_ops(int index, const char* value) {
  skip_ops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.DownpourWorkerParameter.skip_ops)
}
inline void DownpourWorkerParameter::set_skip_ops(int index, const char* value, size_t size) {
  skip_ops_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.DownpourWorkerParameter.skip_ops)
}
inline ::std::string* DownpourWorkerParameter::add_skip_ops() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.DownpourWorkerParameter.skip_ops)
  return skip_ops_.Add();
}
inline void DownpourWorkerParameter::add_skip_ops(const ::std::string& value) {
  skip_ops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.DownpourWorkerParameter.skip_ops)
}
inline void DownpourWorkerParameter::add_skip_ops(const char* value) {
  skip_ops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.DownpourWorkerParameter.skip_ops)
}
inline void DownpourWorkerParameter::add_skip_ops(const char* value, size_t size) {
  skip_ops_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.DownpourWorkerParameter.skip_ops)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DownpourWorkerParameter::skip_ops() const {
  // @@protoc_insertion_point(field_list:paddle.framework.DownpourWorkerParameter.skip_ops)
  return skip_ops_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DownpourWorkerParameter::mutable_skip_ops() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.DownpourWorkerParameter.skip_ops)
  return &skip_ops_;
}

// repeated .paddle.framework.ProgramConfig program_config = 4;
inline int DownpourWorkerParameter::program_config_size() const {
  return program_config_.size();
}
inline void DownpourWorkerParameter::clear_program_config() {
  program_config_.Clear();
}
inline const ::paddle::framework::ProgramConfig& DownpourWorkerParameter::program_config(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.DownpourWorkerParameter.program_config)
  return program_config_.Get(index);
}
inline ::paddle::framework::ProgramConfig* DownpourWorkerParameter::mutable_program_config(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.DownpourWorkerParameter.program_config)
  return program_config_.Mutable(index);
}
inline ::paddle::framework::ProgramConfig* DownpourWorkerParameter::add_program_config() {
  // @@protoc_insertion_point(field_add:paddle.framework.DownpourWorkerParameter.program_config)
  return program_config_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::paddle::framework::ProgramConfig >*
DownpourWorkerParameter::mutable_program_config() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.DownpourWorkerParameter.program_config)
  return &program_config_;
}
inline const ::google::protobuf::RepeatedPtrField< ::paddle::framework::ProgramConfig >&
DownpourWorkerParameter::program_config() const {
  // @@protoc_insertion_point(field_list:paddle.framework.DownpourWorkerParameter.program_config)
  return program_config_;
}

// optional bool push_sparse = 5 [default = true];
inline bool DownpourWorkerParameter::has_push_sparse() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DownpourWorkerParameter::set_has_push_sparse() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DownpourWorkerParameter::clear_has_push_sparse() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DownpourWorkerParameter::clear_push_sparse() {
  push_sparse_ = true;
  clear_has_push_sparse();
}
inline bool DownpourWorkerParameter::push_sparse() const {
  // @@protoc_insertion_point(field_get:paddle.framework.DownpourWorkerParameter.push_sparse)
  return push_sparse_;
}
inline void DownpourWorkerParameter::set_push_sparse(bool value) {
  set_has_push_sparse();
  push_sparse_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.DownpourWorkerParameter.push_sparse)
}

// optional bool push_dense = 6 [default = true];
inline bool DownpourWorkerParameter::has_push_dense() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DownpourWorkerParameter::set_has_push_dense() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DownpourWorkerParameter::clear_has_push_dense() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DownpourWorkerParameter::clear_push_dense() {
  push_dense_ = true;
  clear_has_push_dense();
}
inline bool DownpourWorkerParameter::push_dense() const {
  // @@protoc_insertion_point(field_get:paddle.framework.DownpourWorkerParameter.push_dense)
  return push_dense_;
}
inline void DownpourWorkerParameter::set_push_dense(bool value) {
  set_has_push_dense();
  push_dense_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.DownpourWorkerParameter.push_dense)
}

// repeated string stat_var_names = 7;
inline int DownpourWorkerParameter::stat_var_names_size() const {
  return stat_var_names_.size();
}
inline void DownpourWorkerParameter::clear_stat_var_names() {
  stat_var_names_.Clear();
}
inline const ::std::string& DownpourWorkerParameter::stat_var_names(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.DownpourWorkerParameter.stat_var_names)
  return stat_var_names_.Get(index);
}
inline ::std::string* DownpourWorkerParameter::mutable_stat_var_names(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.DownpourWorkerParameter.stat_var_names)
  return stat_var_names_.Mutable(index);
}
inline void DownpourWorkerParameter::set_stat_var_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.DownpourWorkerParameter.stat_var_names)
  stat_var_names_.Mutable(index)->assign(value);
}
inline void DownpourWorkerParameter::set_stat_var_names(int index, const char* value) {
  stat_var_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.DownpourWorkerParameter.stat_var_names)
}
inline void DownpourWorkerParameter::set_stat_var_names(int index, const char* value, size_t size) {
  stat_var_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.DownpourWorkerParameter.stat_var_names)
}
inline ::std::string* DownpourWorkerParameter::add_stat_var_names() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.DownpourWorkerParameter.stat_var_names)
  return stat_var_names_.Add();
}
inline void DownpourWorkerParameter::add_stat_var_names(const ::std::string& value) {
  stat_var_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.DownpourWorkerParameter.stat_var_names)
}
inline void DownpourWorkerParameter::add_stat_var_names(const char* value) {
  stat_var_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.DownpourWorkerParameter.stat_var_names)
}
inline void DownpourWorkerParameter::add_stat_var_names(const char* value, size_t size) {
  stat_var_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.DownpourWorkerParameter.stat_var_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DownpourWorkerParameter::stat_var_names() const {
  // @@protoc_insertion_point(field_list:paddle.framework.DownpourWorkerParameter.stat_var_names)
  return stat_var_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DownpourWorkerParameter::mutable_stat_var_names() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.DownpourWorkerParameter.stat_var_names)
  return &stat_var_names_;
}

inline const DownpourWorkerParameter* DownpourWorkerParameter::internal_default_instance() {
  return &DownpourWorkerParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// SectionWorkerParameter

// optional .paddle.framework.SectionConfig section_config = 1;
inline bool SectionWorkerParameter::has_section_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SectionWorkerParameter::set_has_section_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SectionWorkerParameter::clear_has_section_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SectionWorkerParameter::clear_section_config() {
  if (section_config_ != NULL) section_config_->::paddle::framework::SectionConfig::Clear();
  clear_has_section_config();
}
inline const ::paddle::framework::SectionConfig& SectionWorkerParameter::section_config() const {
  // @@protoc_insertion_point(field_get:paddle.framework.SectionWorkerParameter.section_config)
  return section_config_ != NULL ? *section_config_
                         : *::paddle::framework::SectionConfig::internal_default_instance();
}
inline ::paddle::framework::SectionConfig* SectionWorkerParameter::mutable_section_config() {
  set_has_section_config();
  if (section_config_ == NULL) {
    section_config_ = new ::paddle::framework::SectionConfig;
  }
  // @@protoc_insertion_point(field_mutable:paddle.framework.SectionWorkerParameter.section_config)
  return section_config_;
}
inline ::paddle::framework::SectionConfig* SectionWorkerParameter::release_section_config() {
  // @@protoc_insertion_point(field_release:paddle.framework.SectionWorkerParameter.section_config)
  clear_has_section_config();
  ::paddle::framework::SectionConfig* temp = section_config_;
  section_config_ = NULL;
  return temp;
}
inline void SectionWorkerParameter::set_allocated_section_config(::paddle::framework::SectionConfig* section_config) {
  delete section_config_;
  section_config_ = section_config;
  if (section_config) {
    set_has_section_config();
  } else {
    clear_has_section_config();
  }
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.SectionWorkerParameter.section_config)
}

// optional int32 queue_size = 2 [default = 1];
inline bool SectionWorkerParameter::has_queue_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SectionWorkerParameter::set_has_queue_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SectionWorkerParameter::clear_has_queue_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SectionWorkerParameter::clear_queue_size() {
  queue_size_ = 1;
  clear_has_queue_size();
}
inline ::google::protobuf::int32 SectionWorkerParameter::queue_size() const {
  // @@protoc_insertion_point(field_get:paddle.framework.SectionWorkerParameter.queue_size)
  return queue_size_;
}
inline void SectionWorkerParameter::set_queue_size(::google::protobuf::int32 value) {
  set_has_queue_size();
  queue_size_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.SectionWorkerParameter.queue_size)
}

// optional int64 sync_steps = 3 [default = 1];
inline bool SectionWorkerParameter::has_sync_steps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SectionWorkerParameter::set_has_sync_steps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SectionWorkerParameter::clear_has_sync_steps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SectionWorkerParameter::clear_sync_steps() {
  sync_steps_ = GOOGLE_LONGLONG(1);
  clear_has_sync_steps();
}
inline ::google::protobuf::int64 SectionWorkerParameter::sync_steps() const {
  // @@protoc_insertion_point(field_get:paddle.framework.SectionWorkerParameter.sync_steps)
  return sync_steps_;
}
inline void SectionWorkerParameter::set_sync_steps(::google::protobuf::int64 value) {
  set_has_sync_steps();
  sync_steps_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.SectionWorkerParameter.sync_steps)
}

// optional int32 start_cpu_core_id = 4 [default = 1];
inline bool SectionWorkerParameter::has_start_cpu_core_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SectionWorkerParameter::set_has_start_cpu_core_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SectionWorkerParameter::clear_has_start_cpu_core_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SectionWorkerParameter::clear_start_cpu_core_id() {
  start_cpu_core_id_ = 1;
  clear_has_start_cpu_core_id();
}
inline ::google::protobuf::int32 SectionWorkerParameter::start_cpu_core_id() const {
  // @@protoc_insertion_point(field_get:paddle.framework.SectionWorkerParameter.start_cpu_core_id)
  return start_cpu_core_id_;
}
inline void SectionWorkerParameter::set_start_cpu_core_id(::google::protobuf::int32 value) {
  set_has_start_cpu_core_id();
  start_cpu_core_id_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.SectionWorkerParameter.start_cpu_core_id)
}

// repeated string param_need_sync = 5;
inline int SectionWorkerParameter::param_need_sync_size() const {
  return param_need_sync_.size();
}
inline void SectionWorkerParameter::clear_param_need_sync() {
  param_need_sync_.Clear();
}
inline const ::std::string& SectionWorkerParameter::param_need_sync(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.SectionWorkerParameter.param_need_sync)
  return param_need_sync_.Get(index);
}
inline ::std::string* SectionWorkerParameter::mutable_param_need_sync(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.SectionWorkerParameter.param_need_sync)
  return param_need_sync_.Mutable(index);
}
inline void SectionWorkerParameter::set_param_need_sync(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.SectionWorkerParameter.param_need_sync)
  param_need_sync_.Mutable(index)->assign(value);
}
inline void SectionWorkerParameter::set_param_need_sync(int index, const char* value) {
  param_need_sync_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.SectionWorkerParameter.param_need_sync)
}
inline void SectionWorkerParameter::set_param_need_sync(int index, const char* value, size_t size) {
  param_need_sync_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.SectionWorkerParameter.param_need_sync)
}
inline ::std::string* SectionWorkerParameter::add_param_need_sync() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.SectionWorkerParameter.param_need_sync)
  return param_need_sync_.Add();
}
inline void SectionWorkerParameter::add_param_need_sync(const ::std::string& value) {
  param_need_sync_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.SectionWorkerParameter.param_need_sync)
}
inline void SectionWorkerParameter::add_param_need_sync(const char* value) {
  param_need_sync_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.SectionWorkerParameter.param_need_sync)
}
inline void SectionWorkerParameter::add_param_need_sync(const char* value, size_t size) {
  param_need_sync_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.SectionWorkerParameter.param_need_sync)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SectionWorkerParameter::param_need_sync() const {
  // @@protoc_insertion_point(field_list:paddle.framework.SectionWorkerParameter.param_need_sync)
  return param_need_sync_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SectionWorkerParameter::mutable_param_need_sync() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.SectionWorkerParameter.param_need_sync)
  return &param_need_sync_;
}

// optional int32 num_microbatches = 6;
inline bool SectionWorkerParameter::has_num_microbatches() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SectionWorkerParameter::set_has_num_microbatches() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SectionWorkerParameter::clear_has_num_microbatches() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SectionWorkerParameter::clear_num_microbatches() {
  num_microbatches_ = 0;
  clear_has_num_microbatches();
}
inline ::google::protobuf::int32 SectionWorkerParameter::num_microbatches() const {
  // @@protoc_insertion_point(field_get:paddle.framework.SectionWorkerParameter.num_microbatches)
  return num_microbatches_;
}
inline void SectionWorkerParameter::set_num_microbatches(::google::protobuf::int32 value) {
  set_has_num_microbatches();
  num_microbatches_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.SectionWorkerParameter.num_microbatches)
}

// optional int32 num_pipeline_stages = 7 [default = 1];
inline bool SectionWorkerParameter::has_num_pipeline_stages() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SectionWorkerParameter::set_has_num_pipeline_stages() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SectionWorkerParameter::clear_has_num_pipeline_stages() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SectionWorkerParameter::clear_num_pipeline_stages() {
  num_pipeline_stages_ = 1;
  clear_has_num_pipeline_stages();
}
inline ::google::protobuf::int32 SectionWorkerParameter::num_pipeline_stages() const {
  // @@protoc_insertion_point(field_get:paddle.framework.SectionWorkerParameter.num_pipeline_stages)
  return num_pipeline_stages_;
}
inline void SectionWorkerParameter::set_num_pipeline_stages(::google::protobuf::int32 value) {
  set_has_num_pipeline_stages();
  num_pipeline_stages_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.SectionWorkerParameter.num_pipeline_stages)
}

// optional int32 pipeline_stage = 8 [default = 1];
inline bool SectionWorkerParameter::has_pipeline_stage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SectionWorkerParameter::set_has_pipeline_stage() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SectionWorkerParameter::clear_has_pipeline_stage() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SectionWorkerParameter::clear_pipeline_stage() {
  pipeline_stage_ = 1;
  clear_has_pipeline_stage();
}
inline ::google::protobuf::int32 SectionWorkerParameter::pipeline_stage() const {
  // @@protoc_insertion_point(field_get:paddle.framework.SectionWorkerParameter.pipeline_stage)
  return pipeline_stage_;
}
inline void SectionWorkerParameter::set_pipeline_stage(::google::protobuf::int32 value) {
  set_has_pipeline_stage();
  pipeline_stage_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.SectionWorkerParameter.pipeline_stage)
}

// optional int32 schedule_mode = 9 [default = 0];
inline bool SectionWorkerParameter::has_schedule_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SectionWorkerParameter::set_has_schedule_mode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SectionWorkerParameter::clear_has_schedule_mode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SectionWorkerParameter::clear_schedule_mode() {
  schedule_mode_ = 0;
  clear_has_schedule_mode();
}
inline ::google::protobuf::int32 SectionWorkerParameter::schedule_mode() const {
  // @@protoc_insertion_point(field_get:paddle.framework.SectionWorkerParameter.schedule_mode)
  return schedule_mode_;
}
inline void SectionWorkerParameter::set_schedule_mode(::google::protobuf::int32 value) {
  set_has_schedule_mode();
  schedule_mode_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.SectionWorkerParameter.schedule_mode)
}

inline const SectionWorkerParameter* SectionWorkerParameter::internal_default_instance() {
  return &SectionWorkerParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// HeterSectionWorkerParameter

// optional .paddle.framework.SectionConfig section_config = 1;
inline bool HeterSectionWorkerParameter::has_section_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeterSectionWorkerParameter::set_has_section_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeterSectionWorkerParameter::clear_has_section_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeterSectionWorkerParameter::clear_section_config() {
  if (section_config_ != NULL) section_config_->::paddle::framework::SectionConfig::Clear();
  clear_has_section_config();
}
inline const ::paddle::framework::SectionConfig& HeterSectionWorkerParameter::section_config() const {
  // @@protoc_insertion_point(field_get:paddle.framework.HeterSectionWorkerParameter.section_config)
  return section_config_ != NULL ? *section_config_
                         : *::paddle::framework::SectionConfig::internal_default_instance();
}
inline ::paddle::framework::SectionConfig* HeterSectionWorkerParameter::mutable_section_config() {
  set_has_section_config();
  if (section_config_ == NULL) {
    section_config_ = new ::paddle::framework::SectionConfig;
  }
  // @@protoc_insertion_point(field_mutable:paddle.framework.HeterSectionWorkerParameter.section_config)
  return section_config_;
}
inline ::paddle::framework::SectionConfig* HeterSectionWorkerParameter::release_section_config() {
  // @@protoc_insertion_point(field_release:paddle.framework.HeterSectionWorkerParameter.section_config)
  clear_has_section_config();
  ::paddle::framework::SectionConfig* temp = section_config_;
  section_config_ = NULL;
  return temp;
}
inline void HeterSectionWorkerParameter::set_allocated_section_config(::paddle::framework::SectionConfig* section_config) {
  delete section_config_;
  section_config_ = section_config;
  if (section_config) {
    set_has_section_config();
  } else {
    clear_has_section_config();
  }
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.HeterSectionWorkerParameter.section_config)
}

// optional int32 queue_size = 2 [default = 1];
inline bool HeterSectionWorkerParameter::has_queue_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeterSectionWorkerParameter::set_has_queue_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeterSectionWorkerParameter::clear_has_queue_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeterSectionWorkerParameter::clear_queue_size() {
  queue_size_ = 1;
  clear_has_queue_size();
}
inline ::google::protobuf::int32 HeterSectionWorkerParameter::queue_size() const {
  // @@protoc_insertion_point(field_get:paddle.framework.HeterSectionWorkerParameter.queue_size)
  return queue_size_;
}
inline void HeterSectionWorkerParameter::set_queue_size(::google::protobuf::int32 value) {
  set_has_queue_size();
  queue_size_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.HeterSectionWorkerParameter.queue_size)
}

// optional int64 sync_steps = 3 [default = 1];
inline bool HeterSectionWorkerParameter::has_sync_steps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeterSectionWorkerParameter::set_has_sync_steps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeterSectionWorkerParameter::clear_has_sync_steps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeterSectionWorkerParameter::clear_sync_steps() {
  sync_steps_ = GOOGLE_LONGLONG(1);
  clear_has_sync_steps();
}
inline ::google::protobuf::int64 HeterSectionWorkerParameter::sync_steps() const {
  // @@protoc_insertion_point(field_get:paddle.framework.HeterSectionWorkerParameter.sync_steps)
  return sync_steps_;
}
inline void HeterSectionWorkerParameter::set_sync_steps(::google::protobuf::int64 value) {
  set_has_sync_steps();
  sync_steps_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.HeterSectionWorkerParameter.sync_steps)
}

// optional int32 start_cpu_core_id = 4 [default = 1];
inline bool HeterSectionWorkerParameter::has_start_cpu_core_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeterSectionWorkerParameter::set_has_start_cpu_core_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeterSectionWorkerParameter::clear_has_start_cpu_core_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeterSectionWorkerParameter::clear_start_cpu_core_id() {
  start_cpu_core_id_ = 1;
  clear_has_start_cpu_core_id();
}
inline ::google::protobuf::int32 HeterSectionWorkerParameter::start_cpu_core_id() const {
  // @@protoc_insertion_point(field_get:paddle.framework.HeterSectionWorkerParameter.start_cpu_core_id)
  return start_cpu_core_id_;
}
inline void HeterSectionWorkerParameter::set_start_cpu_core_id(::google::protobuf::int32 value) {
  set_has_start_cpu_core_id();
  start_cpu_core_id_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.HeterSectionWorkerParameter.start_cpu_core_id)
}

// repeated string param_need_sync = 5;
inline int HeterSectionWorkerParameter::param_need_sync_size() const {
  return param_need_sync_.size();
}
inline void HeterSectionWorkerParameter::clear_param_need_sync() {
  param_need_sync_.Clear();
}
inline const ::std::string& HeterSectionWorkerParameter::param_need_sync(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.HeterSectionWorkerParameter.param_need_sync)
  return param_need_sync_.Get(index);
}
inline ::std::string* HeterSectionWorkerParameter::mutable_param_need_sync(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.HeterSectionWorkerParameter.param_need_sync)
  return param_need_sync_.Mutable(index);
}
inline void HeterSectionWorkerParameter::set_param_need_sync(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.HeterSectionWorkerParameter.param_need_sync)
  param_need_sync_.Mutable(index)->assign(value);
}
inline void HeterSectionWorkerParameter::set_param_need_sync(int index, const char* value) {
  param_need_sync_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.HeterSectionWorkerParameter.param_need_sync)
}
inline void HeterSectionWorkerParameter::set_param_need_sync(int index, const char* value, size_t size) {
  param_need_sync_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.HeterSectionWorkerParameter.param_need_sync)
}
inline ::std::string* HeterSectionWorkerParameter::add_param_need_sync() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.HeterSectionWorkerParameter.param_need_sync)
  return param_need_sync_.Add();
}
inline void HeterSectionWorkerParameter::add_param_need_sync(const ::std::string& value) {
  param_need_sync_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.HeterSectionWorkerParameter.param_need_sync)
}
inline void HeterSectionWorkerParameter::add_param_need_sync(const char* value) {
  param_need_sync_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.HeterSectionWorkerParameter.param_need_sync)
}
inline void HeterSectionWorkerParameter::add_param_need_sync(const char* value, size_t size) {
  param_need_sync_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.HeterSectionWorkerParameter.param_need_sync)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeterSectionWorkerParameter::param_need_sync() const {
  // @@protoc_insertion_point(field_list:paddle.framework.HeterSectionWorkerParameter.param_need_sync)
  return param_need_sync_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HeterSectionWorkerParameter::mutable_param_need_sync() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.HeterSectionWorkerParameter.param_need_sync)
  return &param_need_sync_;
}

// optional int32 num_microbatches = 6;
inline bool HeterSectionWorkerParameter::has_num_microbatches() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HeterSectionWorkerParameter::set_has_num_microbatches() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HeterSectionWorkerParameter::clear_has_num_microbatches() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HeterSectionWorkerParameter::clear_num_microbatches() {
  num_microbatches_ = 0;
  clear_has_num_microbatches();
}
inline ::google::protobuf::int32 HeterSectionWorkerParameter::num_microbatches() const {
  // @@protoc_insertion_point(field_get:paddle.framework.HeterSectionWorkerParameter.num_microbatches)
  return num_microbatches_;
}
inline void HeterSectionWorkerParameter::set_num_microbatches(::google::protobuf::int32 value) {
  set_has_num_microbatches();
  num_microbatches_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.HeterSectionWorkerParameter.num_microbatches)
}

// optional int32 num_pipeline_stages = 7 [default = 1];
inline bool HeterSectionWorkerParameter::has_num_pipeline_stages() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HeterSectionWorkerParameter::set_has_num_pipeline_stages() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HeterSectionWorkerParameter::clear_has_num_pipeline_stages() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HeterSectionWorkerParameter::clear_num_pipeline_stages() {
  num_pipeline_stages_ = 1;
  clear_has_num_pipeline_stages();
}
inline ::google::protobuf::int32 HeterSectionWorkerParameter::num_pipeline_stages() const {
  // @@protoc_insertion_point(field_get:paddle.framework.HeterSectionWorkerParameter.num_pipeline_stages)
  return num_pipeline_stages_;
}
inline void HeterSectionWorkerParameter::set_num_pipeline_stages(::google::protobuf::int32 value) {
  set_has_num_pipeline_stages();
  num_pipeline_stages_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.HeterSectionWorkerParameter.num_pipeline_stages)
}

// optional int32 pipeline_stage = 8 [default = 1];
inline bool HeterSectionWorkerParameter::has_pipeline_stage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HeterSectionWorkerParameter::set_has_pipeline_stage() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HeterSectionWorkerParameter::clear_has_pipeline_stage() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HeterSectionWorkerParameter::clear_pipeline_stage() {
  pipeline_stage_ = 1;
  clear_has_pipeline_stage();
}
inline ::google::protobuf::int32 HeterSectionWorkerParameter::pipeline_stage() const {
  // @@protoc_insertion_point(field_get:paddle.framework.HeterSectionWorkerParameter.pipeline_stage)
  return pipeline_stage_;
}
inline void HeterSectionWorkerParameter::set_pipeline_stage(::google::protobuf::int32 value) {
  set_has_pipeline_stage();
  pipeline_stage_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.HeterSectionWorkerParameter.pipeline_stage)
}

inline const HeterSectionWorkerParameter* HeterSectionWorkerParameter::internal_default_instance() {
  return &HeterSectionWorkerParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// SectionConfig

// optional .paddle.framework.proto.ProgramDesc program_desc = 1;
inline bool SectionConfig::has_program_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SectionConfig::set_has_program_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SectionConfig::clear_has_program_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SectionConfig::clear_program_desc() {
  if (program_desc_ != NULL) program_desc_->::paddle::framework::proto::ProgramDesc::Clear();
  clear_has_program_desc();
}
inline const ::paddle::framework::proto::ProgramDesc& SectionConfig::program_desc() const {
  // @@protoc_insertion_point(field_get:paddle.framework.SectionConfig.program_desc)
  return program_desc_ != NULL ? *program_desc_
                         : *::paddle::framework::proto::ProgramDesc::internal_default_instance();
}
inline ::paddle::framework::proto::ProgramDesc* SectionConfig::mutable_program_desc() {
  set_has_program_desc();
  if (program_desc_ == NULL) {
    program_desc_ = new ::paddle::framework::proto::ProgramDesc;
  }
  // @@protoc_insertion_point(field_mutable:paddle.framework.SectionConfig.program_desc)
  return program_desc_;
}
inline ::paddle::framework::proto::ProgramDesc* SectionConfig::release_program_desc() {
  // @@protoc_insertion_point(field_release:paddle.framework.SectionConfig.program_desc)
  clear_has_program_desc();
  ::paddle::framework::proto::ProgramDesc* temp = program_desc_;
  program_desc_ = NULL;
  return temp;
}
inline void SectionConfig::set_allocated_program_desc(::paddle::framework::proto::ProgramDesc* program_desc) {
  delete program_desc_;
  program_desc_ = program_desc;
  if (program_desc) {
    set_has_program_desc();
  } else {
    clear_has_program_desc();
  }
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.SectionConfig.program_desc)
}

// optional .paddle.framework.SectionConfig.Place place = 2;
inline bool SectionConfig::has_place() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SectionConfig::set_has_place() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SectionConfig::clear_has_place() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SectionConfig::clear_place() {
  place_ = 0;
  clear_has_place();
}
inline ::paddle::framework::SectionConfig_Place SectionConfig::place() const {
  // @@protoc_insertion_point(field_get:paddle.framework.SectionConfig.place)
  return static_cast< ::paddle::framework::SectionConfig_Place >(place_);
}
inline void SectionConfig::set_place(::paddle::framework::SectionConfig_Place value) {
  assert(::paddle::framework::SectionConfig_Place_IsValid(value));
  set_has_place();
  place_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.SectionConfig.place)
}

// optional int32 concurrency = 3 [default = 1];
inline bool SectionConfig::has_concurrency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SectionConfig::set_has_concurrency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SectionConfig::clear_has_concurrency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SectionConfig::clear_concurrency() {
  concurrency_ = 1;
  clear_has_concurrency();
}
inline ::google::protobuf::int32 SectionConfig::concurrency() const {
  // @@protoc_insertion_point(field_get:paddle.framework.SectionConfig.concurrency)
  return concurrency_;
}
inline void SectionConfig::set_concurrency(::google::protobuf::int32 value) {
  set_has_concurrency();
  concurrency_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.SectionConfig.concurrency)
}

// repeated string section_in_var_names = 4;
inline int SectionConfig::section_in_var_names_size() const {
  return section_in_var_names_.size();
}
inline void SectionConfig::clear_section_in_var_names() {
  section_in_var_names_.Clear();
}
inline const ::std::string& SectionConfig::section_in_var_names(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.SectionConfig.section_in_var_names)
  return section_in_var_names_.Get(index);
}
inline ::std::string* SectionConfig::mutable_section_in_var_names(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.SectionConfig.section_in_var_names)
  return section_in_var_names_.Mutable(index);
}
inline void SectionConfig::set_section_in_var_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.SectionConfig.section_in_var_names)
  section_in_var_names_.Mutable(index)->assign(value);
}
inline void SectionConfig::set_section_in_var_names(int index, const char* value) {
  section_in_var_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.SectionConfig.section_in_var_names)
}
inline void SectionConfig::set_section_in_var_names(int index, const char* value, size_t size) {
  section_in_var_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.SectionConfig.section_in_var_names)
}
inline ::std::string* SectionConfig::add_section_in_var_names() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.SectionConfig.section_in_var_names)
  return section_in_var_names_.Add();
}
inline void SectionConfig::add_section_in_var_names(const ::std::string& value) {
  section_in_var_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.SectionConfig.section_in_var_names)
}
inline void SectionConfig::add_section_in_var_names(const char* value) {
  section_in_var_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.SectionConfig.section_in_var_names)
}
inline void SectionConfig::add_section_in_var_names(const char* value, size_t size) {
  section_in_var_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.SectionConfig.section_in_var_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SectionConfig::section_in_var_names() const {
  // @@protoc_insertion_point(field_list:paddle.framework.SectionConfig.section_in_var_names)
  return section_in_var_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SectionConfig::mutable_section_in_var_names() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.SectionConfig.section_in_var_names)
  return &section_in_var_names_;
}

// repeated string section_out_var_names = 5;
inline int SectionConfig::section_out_var_names_size() const {
  return section_out_var_names_.size();
}
inline void SectionConfig::clear_section_out_var_names() {
  section_out_var_names_.Clear();
}
inline const ::std::string& SectionConfig::section_out_var_names(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.SectionConfig.section_out_var_names)
  return section_out_var_names_.Get(index);
}
inline ::std::string* SectionConfig::mutable_section_out_var_names(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.SectionConfig.section_out_var_names)
  return section_out_var_names_.Mutable(index);
}
inline void SectionConfig::set_section_out_var_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.SectionConfig.section_out_var_names)
  section_out_var_names_.Mutable(index)->assign(value);
}
inline void SectionConfig::set_section_out_var_names(int index, const char* value) {
  section_out_var_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.SectionConfig.section_out_var_names)
}
inline void SectionConfig::set_section_out_var_names(int index, const char* value, size_t size) {
  section_out_var_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.SectionConfig.section_out_var_names)
}
inline ::std::string* SectionConfig::add_section_out_var_names() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.SectionConfig.section_out_var_names)
  return section_out_var_names_.Add();
}
inline void SectionConfig::add_section_out_var_names(const ::std::string& value) {
  section_out_var_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.SectionConfig.section_out_var_names)
}
inline void SectionConfig::add_section_out_var_names(const char* value) {
  section_out_var_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.SectionConfig.section_out_var_names)
}
inline void SectionConfig::add_section_out_var_names(const char* value, size_t size) {
  section_out_var_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.SectionConfig.section_out_var_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SectionConfig::section_out_var_names() const {
  // @@protoc_insertion_point(field_list:paddle.framework.SectionConfig.section_out_var_names)
  return section_out_var_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SectionConfig::mutable_section_out_var_names() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.SectionConfig.section_out_var_names)
  return &section_out_var_names_;
}

// optional int32 place_id = 6 [default = -1];
inline bool SectionConfig::has_place_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SectionConfig::set_has_place_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SectionConfig::clear_has_place_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SectionConfig::clear_place_id() {
  place_id_ = -1;
  clear_has_place_id();
}
inline ::google::protobuf::int32 SectionConfig::place_id() const {
  // @@protoc_insertion_point(field_get:paddle.framework.SectionConfig.place_id)
  return place_id_;
}
inline void SectionConfig::set_place_id(::google::protobuf::int32 value) {
  set_has_place_id();
  place_id_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.SectionConfig.place_id)
}

inline const SectionConfig* SectionConfig::internal_default_instance() {
  return &SectionConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// FetchConfig

// repeated string fetch_var_names = 1;
inline int FetchConfig::fetch_var_names_size() const {
  return fetch_var_names_.size();
}
inline void FetchConfig::clear_fetch_var_names() {
  fetch_var_names_.Clear();
}
inline const ::std::string& FetchConfig::fetch_var_names(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.FetchConfig.fetch_var_names)
  return fetch_var_names_.Get(index);
}
inline ::std::string* FetchConfig::mutable_fetch_var_names(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.FetchConfig.fetch_var_names)
  return fetch_var_names_.Mutable(index);
}
inline void FetchConfig::set_fetch_var_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.FetchConfig.fetch_var_names)
  fetch_var_names_.Mutable(index)->assign(value);
}
inline void FetchConfig::set_fetch_var_names(int index, const char* value) {
  fetch_var_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.FetchConfig.fetch_var_names)
}
inline void FetchConfig::set_fetch_var_names(int index, const char* value, size_t size) {
  fetch_var_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.FetchConfig.fetch_var_names)
}
inline ::std::string* FetchConfig::add_fetch_var_names() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.FetchConfig.fetch_var_names)
  return fetch_var_names_.Add();
}
inline void FetchConfig::add_fetch_var_names(const ::std::string& value) {
  fetch_var_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.FetchConfig.fetch_var_names)
}
inline void FetchConfig::add_fetch_var_names(const char* value) {
  fetch_var_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.FetchConfig.fetch_var_names)
}
inline void FetchConfig::add_fetch_var_names(const char* value, size_t size) {
  fetch_var_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.FetchConfig.fetch_var_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FetchConfig::fetch_var_names() const {
  // @@protoc_insertion_point(field_list:paddle.framework.FetchConfig.fetch_var_names)
  return fetch_var_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FetchConfig::mutable_fetch_var_names() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.FetchConfig.fetch_var_names)
  return &fetch_var_names_;
}

// repeated string fetch_var_str_format = 2;
inline int FetchConfig::fetch_var_str_format_size() const {
  return fetch_var_str_format_.size();
}
inline void FetchConfig::clear_fetch_var_str_format() {
  fetch_var_str_format_.Clear();
}
inline const ::std::string& FetchConfig::fetch_var_str_format(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.FetchConfig.fetch_var_str_format)
  return fetch_var_str_format_.Get(index);
}
inline ::std::string* FetchConfig::mutable_fetch_var_str_format(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.FetchConfig.fetch_var_str_format)
  return fetch_var_str_format_.Mutable(index);
}
inline void FetchConfig::set_fetch_var_str_format(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.FetchConfig.fetch_var_str_format)
  fetch_var_str_format_.Mutable(index)->assign(value);
}
inline void FetchConfig::set_fetch_var_str_format(int index, const char* value) {
  fetch_var_str_format_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.FetchConfig.fetch_var_str_format)
}
inline void FetchConfig::set_fetch_var_str_format(int index, const char* value, size_t size) {
  fetch_var_str_format_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.FetchConfig.fetch_var_str_format)
}
inline ::std::string* FetchConfig::add_fetch_var_str_format() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.FetchConfig.fetch_var_str_format)
  return fetch_var_str_format_.Add();
}
inline void FetchConfig::add_fetch_var_str_format(const ::std::string& value) {
  fetch_var_str_format_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.FetchConfig.fetch_var_str_format)
}
inline void FetchConfig::add_fetch_var_str_format(const char* value) {
  fetch_var_str_format_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.FetchConfig.fetch_var_str_format)
}
inline void FetchConfig::add_fetch_var_str_format(const char* value, size_t size) {
  fetch_var_str_format_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.FetchConfig.fetch_var_str_format)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FetchConfig::fetch_var_str_format() const {
  // @@protoc_insertion_point(field_list:paddle.framework.FetchConfig.fetch_var_str_format)
  return fetch_var_str_format_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FetchConfig::mutable_fetch_var_str_format() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.FetchConfig.fetch_var_str_format)
  return &fetch_var_str_format_;
}

// optional int32 print_period = 3 [default = 100];
inline bool FetchConfig::has_print_period() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FetchConfig::set_has_print_period() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FetchConfig::clear_has_print_period() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FetchConfig::clear_print_period() {
  print_period_ = 100;
  clear_has_print_period();
}
inline ::google::protobuf::int32 FetchConfig::print_period() const {
  // @@protoc_insertion_point(field_get:paddle.framework.FetchConfig.print_period)
  return print_period_;
}
inline void FetchConfig::set_print_period(::google::protobuf::int32 value) {
  set_has_print_period();
  print_period_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.FetchConfig.print_period)
}

// optional .paddle.framework.FetchConfig.Method method = 4 [default = PRINT];
inline bool FetchConfig::has_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FetchConfig::set_has_method() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FetchConfig::clear_has_method() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FetchConfig::clear_method() {
  method_ = 0;
  clear_has_method();
}
inline ::paddle::framework::FetchConfig_Method FetchConfig::method() const {
  // @@protoc_insertion_point(field_get:paddle.framework.FetchConfig.method)
  return static_cast< ::paddle::framework::FetchConfig_Method >(method_);
}
inline void FetchConfig::set_method(::paddle::framework::FetchConfig_Method value) {
  assert(::paddle::framework::FetchConfig_Method_IsValid(value));
  set_has_method();
  method_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.FetchConfig.method)
}

inline const FetchConfig* FetchConfig::internal_default_instance() {
  return &FetchConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// AdjustInsWeightConfig

// optional bool need_adjust = 1 [default = false];
inline bool AdjustInsWeightConfig::has_need_adjust() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdjustInsWeightConfig::set_has_need_adjust() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdjustInsWeightConfig::clear_has_need_adjust() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdjustInsWeightConfig::clear_need_adjust() {
  need_adjust_ = false;
  clear_has_need_adjust();
}
inline bool AdjustInsWeightConfig::need_adjust() const {
  // @@protoc_insertion_point(field_get:paddle.framework.AdjustInsWeightConfig.need_adjust)
  return need_adjust_;
}
inline void AdjustInsWeightConfig::set_need_adjust(bool value) {
  set_has_need_adjust();
  need_adjust_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.AdjustInsWeightConfig.need_adjust)
}

// optional string nid_slot = 2 [default = ""];
inline bool AdjustInsWeightConfig::has_nid_slot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdjustInsWeightConfig::set_has_nid_slot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdjustInsWeightConfig::clear_has_nid_slot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdjustInsWeightConfig::clear_nid_slot() {
  nid_slot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nid_slot();
}
inline const ::std::string& AdjustInsWeightConfig::nid_slot() const {
  // @@protoc_insertion_point(field_get:paddle.framework.AdjustInsWeightConfig.nid_slot)
  return nid_slot_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdjustInsWeightConfig::set_nid_slot(const ::std::string& value) {
  set_has_nid_slot();
  nid_slot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:paddle.framework.AdjustInsWeightConfig.nid_slot)
}
inline void AdjustInsWeightConfig::set_nid_slot(const char* value) {
  set_has_nid_slot();
  nid_slot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paddle.framework.AdjustInsWeightConfig.nid_slot)
}
inline void AdjustInsWeightConfig::set_nid_slot(const char* value, size_t size) {
  set_has_nid_slot();
  nid_slot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.AdjustInsWeightConfig.nid_slot)
}
inline ::std::string* AdjustInsWeightConfig::mutable_nid_slot() {
  set_has_nid_slot();
  // @@protoc_insertion_point(field_mutable:paddle.framework.AdjustInsWeightConfig.nid_slot)
  return nid_slot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdjustInsWeightConfig::release_nid_slot() {
  // @@protoc_insertion_point(field_release:paddle.framework.AdjustInsWeightConfig.nid_slot)
  clear_has_nid_slot();
  return nid_slot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdjustInsWeightConfig::set_allocated_nid_slot(::std::string* nid_slot) {
  if (nid_slot != NULL) {
    set_has_nid_slot();
  } else {
    clear_has_nid_slot();
  }
  nid_slot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nid_slot);
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.AdjustInsWeightConfig.nid_slot)
}

// optional float nid_adjw_threshold = 3 [default = 0];
inline bool AdjustInsWeightConfig::has_nid_adjw_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdjustInsWeightConfig::set_has_nid_adjw_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdjustInsWeightConfig::clear_has_nid_adjw_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdjustInsWeightConfig::clear_nid_adjw_threshold() {
  nid_adjw_threshold_ = 0;
  clear_has_nid_adjw_threshold();
}
inline float AdjustInsWeightConfig::nid_adjw_threshold() const {
  // @@protoc_insertion_point(field_get:paddle.framework.AdjustInsWeightConfig.nid_adjw_threshold)
  return nid_adjw_threshold_;
}
inline void AdjustInsWeightConfig::set_nid_adjw_threshold(float value) {
  set_has_nid_adjw_threshold();
  nid_adjw_threshold_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.AdjustInsWeightConfig.nid_adjw_threshold)
}

// optional float nid_adjw_ratio = 4 [default = 0];
inline bool AdjustInsWeightConfig::has_nid_adjw_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdjustInsWeightConfig::set_has_nid_adjw_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdjustInsWeightConfig::clear_has_nid_adjw_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdjustInsWeightConfig::clear_nid_adjw_ratio() {
  nid_adjw_ratio_ = 0;
  clear_has_nid_adjw_ratio();
}
inline float AdjustInsWeightConfig::nid_adjw_ratio() const {
  // @@protoc_insertion_point(field_get:paddle.framework.AdjustInsWeightConfig.nid_adjw_ratio)
  return nid_adjw_ratio_;
}
inline void AdjustInsWeightConfig::set_nid_adjw_ratio(float value) {
  set_has_nid_adjw_ratio();
  nid_adjw_ratio_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.AdjustInsWeightConfig.nid_adjw_ratio)
}

// optional string ins_weight_slot = 5 [default = ""];
inline bool AdjustInsWeightConfig::has_ins_weight_slot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdjustInsWeightConfig::set_has_ins_weight_slot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdjustInsWeightConfig::clear_has_ins_weight_slot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdjustInsWeightConfig::clear_ins_weight_slot() {
  ins_weight_slot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ins_weight_slot();
}
inline const ::std::string& AdjustInsWeightConfig::ins_weight_slot() const {
  // @@protoc_insertion_point(field_get:paddle.framework.AdjustInsWeightConfig.ins_weight_slot)
  return ins_weight_slot_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdjustInsWeightConfig::set_ins_weight_slot(const ::std::string& value) {
  set_has_ins_weight_slot();
  ins_weight_slot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:paddle.framework.AdjustInsWeightConfig.ins_weight_slot)
}
inline void AdjustInsWeightConfig::set_ins_weight_slot(const char* value) {
  set_has_ins_weight_slot();
  ins_weight_slot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paddle.framework.AdjustInsWeightConfig.ins_weight_slot)
}
inline void AdjustInsWeightConfig::set_ins_weight_slot(const char* value, size_t size) {
  set_has_ins_weight_slot();
  ins_weight_slot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.AdjustInsWeightConfig.ins_weight_slot)
}
inline ::std::string* AdjustInsWeightConfig::mutable_ins_weight_slot() {
  set_has_ins_weight_slot();
  // @@protoc_insertion_point(field_mutable:paddle.framework.AdjustInsWeightConfig.ins_weight_slot)
  return ins_weight_slot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdjustInsWeightConfig::release_ins_weight_slot() {
  // @@protoc_insertion_point(field_release:paddle.framework.AdjustInsWeightConfig.ins_weight_slot)
  clear_has_ins_weight_slot();
  return ins_weight_slot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdjustInsWeightConfig::set_allocated_ins_weight_slot(::std::string* ins_weight_slot) {
  if (ins_weight_slot != NULL) {
    set_has_ins_weight_slot();
  } else {
    clear_has_ins_weight_slot();
  }
  ins_weight_slot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ins_weight_slot);
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.AdjustInsWeightConfig.ins_weight_slot)
}

inline const AdjustInsWeightConfig* AdjustInsWeightConfig::internal_default_instance() {
  return &AdjustInsWeightConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// TableDependencyMap

// required int32 key = 1;
inline bool TableDependencyMap::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableDependencyMap::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableDependencyMap::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableDependencyMap::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 TableDependencyMap::key() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TableDependencyMap.key)
  return key_;
}
inline void TableDependencyMap::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TableDependencyMap.key)
}

// repeated int32 values = 2;
inline int TableDependencyMap::values_size() const {
  return values_.size();
}
inline void TableDependencyMap::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::int32 TableDependencyMap::values(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.TableDependencyMap.values)
  return values_.Get(index);
}
inline void TableDependencyMap::set_values(int index, ::google::protobuf::int32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.TableDependencyMap.values)
}
inline void TableDependencyMap::add_values(::google::protobuf::int32 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:paddle.framework.TableDependencyMap.values)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TableDependencyMap::values() const {
  // @@protoc_insertion_point(field_list:paddle.framework.TableDependencyMap.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TableDependencyMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.TableDependencyMap.values)
  return &values_;
}

inline const TableDependencyMap* TableDependencyMap::internal_default_instance() {
  return &TableDependencyMap_default_instance_.get();
}
// -------------------------------------------------------------------

// CopyTableConfig

// optional bool need_copy = 1 [default = false];
inline bool CopyTableConfig::has_need_copy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CopyTableConfig::set_has_need_copy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CopyTableConfig::clear_has_need_copy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CopyTableConfig::clear_need_copy() {
  need_copy_ = false;
  clear_has_need_copy();
}
inline bool CopyTableConfig::need_copy() const {
  // @@protoc_insertion_point(field_get:paddle.framework.CopyTableConfig.need_copy)
  return need_copy_;
}
inline void CopyTableConfig::set_need_copy(bool value) {
  set_has_need_copy();
  need_copy_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.CopyTableConfig.need_copy)
}

// optional int32 batch_num = 2 [default = 100];
inline bool CopyTableConfig::has_batch_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CopyTableConfig::set_has_batch_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CopyTableConfig::clear_has_batch_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CopyTableConfig::clear_batch_num() {
  batch_num_ = 100;
  clear_has_batch_num();
}
inline ::google::protobuf::int32 CopyTableConfig::batch_num() const {
  // @@protoc_insertion_point(field_get:paddle.framework.CopyTableConfig.batch_num)
  return batch_num_;
}
inline void CopyTableConfig::set_batch_num(::google::protobuf::int32 value) {
  set_has_batch_num();
  batch_num_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.CopyTableConfig.batch_num)
}

// repeated int32 src_sparse_tables = 3;
inline int CopyTableConfig::src_sparse_tables_size() const {
  return src_sparse_tables_.size();
}
inline void CopyTableConfig::clear_src_sparse_tables() {
  src_sparse_tables_.Clear();
}
inline ::google::protobuf::int32 CopyTableConfig::src_sparse_tables(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.CopyTableConfig.src_sparse_tables)
  return src_sparse_tables_.Get(index);
}
inline void CopyTableConfig::set_src_sparse_tables(int index, ::google::protobuf::int32 value) {
  src_sparse_tables_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.CopyTableConfig.src_sparse_tables)
}
inline void CopyTableConfig::add_src_sparse_tables(::google::protobuf::int32 value) {
  src_sparse_tables_.Add(value);
  // @@protoc_insertion_point(field_add:paddle.framework.CopyTableConfig.src_sparse_tables)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CopyTableConfig::src_sparse_tables() const {
  // @@protoc_insertion_point(field_list:paddle.framework.CopyTableConfig.src_sparse_tables)
  return src_sparse_tables_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CopyTableConfig::mutable_src_sparse_tables() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.CopyTableConfig.src_sparse_tables)
  return &src_sparse_tables_;
}

// repeated int32 dest_sparse_tables = 4;
inline int CopyTableConfig::dest_sparse_tables_size() const {
  return dest_sparse_tables_.size();
}
inline void CopyTableConfig::clear_dest_sparse_tables() {
  dest_sparse_tables_.Clear();
}
inline ::google::protobuf::int32 CopyTableConfig::dest_sparse_tables(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.CopyTableConfig.dest_sparse_tables)
  return dest_sparse_tables_.Get(index);
}
inline void CopyTableConfig::set_dest_sparse_tables(int index, ::google::protobuf::int32 value) {
  dest_sparse_tables_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.CopyTableConfig.dest_sparse_tables)
}
inline void CopyTableConfig::add_dest_sparse_tables(::google::protobuf::int32 value) {
  dest_sparse_tables_.Add(value);
  // @@protoc_insertion_point(field_add:paddle.framework.CopyTableConfig.dest_sparse_tables)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CopyTableConfig::dest_sparse_tables() const {
  // @@protoc_insertion_point(field_list:paddle.framework.CopyTableConfig.dest_sparse_tables)
  return dest_sparse_tables_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CopyTableConfig::mutable_dest_sparse_tables() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.CopyTableConfig.dest_sparse_tables)
  return &dest_sparse_tables_;
}

// repeated int32 src_dense_tables = 5;
inline int CopyTableConfig::src_dense_tables_size() const {
  return src_dense_tables_.size();
}
inline void CopyTableConfig::clear_src_dense_tables() {
  src_dense_tables_.Clear();
}
inline ::google::protobuf::int32 CopyTableConfig::src_dense_tables(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.CopyTableConfig.src_dense_tables)
  return src_dense_tables_.Get(index);
}
inline void CopyTableConfig::set_src_dense_tables(int index, ::google::protobuf::int32 value) {
  src_dense_tables_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.CopyTableConfig.src_dense_tables)
}
inline void CopyTableConfig::add_src_dense_tables(::google::protobuf::int32 value) {
  src_dense_tables_.Add(value);
  // @@protoc_insertion_point(field_add:paddle.framework.CopyTableConfig.src_dense_tables)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CopyTableConfig::src_dense_tables() const {
  // @@protoc_insertion_point(field_list:paddle.framework.CopyTableConfig.src_dense_tables)
  return src_dense_tables_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CopyTableConfig::mutable_src_dense_tables() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.CopyTableConfig.src_dense_tables)
  return &src_dense_tables_;
}

// repeated int32 dest_dense_tables = 6;
inline int CopyTableConfig::dest_dense_tables_size() const {
  return dest_dense_tables_.size();
}
inline void CopyTableConfig::clear_dest_dense_tables() {
  dest_dense_tables_.Clear();
}
inline ::google::protobuf::int32 CopyTableConfig::dest_dense_tables(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.CopyTableConfig.dest_dense_tables)
  return dest_dense_tables_.Get(index);
}
inline void CopyTableConfig::set_dest_dense_tables(int index, ::google::protobuf::int32 value) {
  dest_dense_tables_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.CopyTableConfig.dest_dense_tables)
}
inline void CopyTableConfig::add_dest_dense_tables(::google::protobuf::int32 value) {
  dest_dense_tables_.Add(value);
  // @@protoc_insertion_point(field_add:paddle.framework.CopyTableConfig.dest_dense_tables)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CopyTableConfig::dest_dense_tables() const {
  // @@protoc_insertion_point(field_list:paddle.framework.CopyTableConfig.dest_dense_tables)
  return dest_dense_tables_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CopyTableConfig::mutable_dest_dense_tables() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.CopyTableConfig.dest_dense_tables)
  return &dest_dense_tables_;
}

// repeated string src_var_list = 7;
inline int CopyTableConfig::src_var_list_size() const {
  return src_var_list_.size();
}
inline void CopyTableConfig::clear_src_var_list() {
  src_var_list_.Clear();
}
inline const ::std::string& CopyTableConfig::src_var_list(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.CopyTableConfig.src_var_list)
  return src_var_list_.Get(index);
}
inline ::std::string* CopyTableConfig::mutable_src_var_list(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.CopyTableConfig.src_var_list)
  return src_var_list_.Mutable(index);
}
inline void CopyTableConfig::set_src_var_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.CopyTableConfig.src_var_list)
  src_var_list_.Mutable(index)->assign(value);
}
inline void CopyTableConfig::set_src_var_list(int index, const char* value) {
  src_var_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.CopyTableConfig.src_var_list)
}
inline void CopyTableConfig::set_src_var_list(int index, const char* value, size_t size) {
  src_var_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.CopyTableConfig.src_var_list)
}
inline ::std::string* CopyTableConfig::add_src_var_list() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.CopyTableConfig.src_var_list)
  return src_var_list_.Add();
}
inline void CopyTableConfig::add_src_var_list(const ::std::string& value) {
  src_var_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.CopyTableConfig.src_var_list)
}
inline void CopyTableConfig::add_src_var_list(const char* value) {
  src_var_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.CopyTableConfig.src_var_list)
}
inline void CopyTableConfig::add_src_var_list(const char* value, size_t size) {
  src_var_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.CopyTableConfig.src_var_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CopyTableConfig::src_var_list() const {
  // @@protoc_insertion_point(field_list:paddle.framework.CopyTableConfig.src_var_list)
  return src_var_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CopyTableConfig::mutable_src_var_list() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.CopyTableConfig.src_var_list)
  return &src_var_list_;
}

// repeated string dest_var_list = 8;
inline int CopyTableConfig::dest_var_list_size() const {
  return dest_var_list_.size();
}
inline void CopyTableConfig::clear_dest_var_list() {
  dest_var_list_.Clear();
}
inline const ::std::string& CopyTableConfig::dest_var_list(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.CopyTableConfig.dest_var_list)
  return dest_var_list_.Get(index);
}
inline ::std::string* CopyTableConfig::mutable_dest_var_list(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.CopyTableConfig.dest_var_list)
  return dest_var_list_.Mutable(index);
}
inline void CopyTableConfig::set_dest_var_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.CopyTableConfig.dest_var_list)
  dest_var_list_.Mutable(index)->assign(value);
}
inline void CopyTableConfig::set_dest_var_list(int index, const char* value) {
  dest_var_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.CopyTableConfig.dest_var_list)
}
inline void CopyTableConfig::set_dest_var_list(int index, const char* value, size_t size) {
  dest_var_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.CopyTableConfig.dest_var_list)
}
inline ::std::string* CopyTableConfig::add_dest_var_list() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.CopyTableConfig.dest_var_list)
  return dest_var_list_.Add();
}
inline void CopyTableConfig::add_dest_var_list(const ::std::string& value) {
  dest_var_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.CopyTableConfig.dest_var_list)
}
inline void CopyTableConfig::add_dest_var_list(const char* value) {
  dest_var_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.CopyTableConfig.dest_var_list)
}
inline void CopyTableConfig::add_dest_var_list(const char* value, size_t size) {
  dest_var_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.CopyTableConfig.dest_var_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CopyTableConfig::dest_var_list() const {
  // @@protoc_insertion_point(field_list:paddle.framework.CopyTableConfig.dest_var_list)
  return dest_var_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CopyTableConfig::mutable_dest_var_list() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.CopyTableConfig.dest_var_list)
  return &dest_var_list_;
}

// optional bool dense_pull_after_copy = 9 [default = false];
inline bool CopyTableConfig::has_dense_pull_after_copy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CopyTableConfig::set_has_dense_pull_after_copy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CopyTableConfig::clear_has_dense_pull_after_copy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CopyTableConfig::clear_dense_pull_after_copy() {
  dense_pull_after_copy_ = false;
  clear_has_dense_pull_after_copy();
}
inline bool CopyTableConfig::dense_pull_after_copy() const {
  // @@protoc_insertion_point(field_get:paddle.framework.CopyTableConfig.dense_pull_after_copy)
  return dense_pull_after_copy_;
}
inline void CopyTableConfig::set_dense_pull_after_copy(bool value) {
  set_has_dense_pull_after_copy();
  dense_pull_after_copy_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.CopyTableConfig.dense_pull_after_copy)
}

// optional bool sparse_copy_by_feasign = 10 [default = true];
inline bool CopyTableConfig::has_sparse_copy_by_feasign() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CopyTableConfig::set_has_sparse_copy_by_feasign() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CopyTableConfig::clear_has_sparse_copy_by_feasign() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CopyTableConfig::clear_sparse_copy_by_feasign() {
  sparse_copy_by_feasign_ = true;
  clear_has_sparse_copy_by_feasign();
}
inline bool CopyTableConfig::sparse_copy_by_feasign() const {
  // @@protoc_insertion_point(field_get:paddle.framework.CopyTableConfig.sparse_copy_by_feasign)
  return sparse_copy_by_feasign_;
}
inline void CopyTableConfig::set_sparse_copy_by_feasign(bool value) {
  set_has_sparse_copy_by_feasign();
  sparse_copy_by_feasign_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.CopyTableConfig.sparse_copy_by_feasign)
}

// optional bool enable_dependency = 11 [default = false];
inline bool CopyTableConfig::has_enable_dependency() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CopyTableConfig::set_has_enable_dependency() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CopyTableConfig::clear_has_enable_dependency() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CopyTableConfig::clear_enable_dependency() {
  enable_dependency_ = false;
  clear_has_enable_dependency();
}
inline bool CopyTableConfig::enable_dependency() const {
  // @@protoc_insertion_point(field_get:paddle.framework.CopyTableConfig.enable_dependency)
  return enable_dependency_;
}
inline void CopyTableConfig::set_enable_dependency(bool value) {
  set_has_enable_dependency();
  enable_dependency_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.CopyTableConfig.enable_dependency)
}

// repeated .paddle.framework.TableDependencyMap table_denpendency_map = 12;
inline int CopyTableConfig::table_denpendency_map_size() const {
  return table_denpendency_map_.size();
}
inline void CopyTableConfig::clear_table_denpendency_map() {
  table_denpendency_map_.Clear();
}
inline const ::paddle::framework::TableDependencyMap& CopyTableConfig::table_denpendency_map(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.CopyTableConfig.table_denpendency_map)
  return table_denpendency_map_.Get(index);
}
inline ::paddle::framework::TableDependencyMap* CopyTableConfig::mutable_table_denpendency_map(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.CopyTableConfig.table_denpendency_map)
  return table_denpendency_map_.Mutable(index);
}
inline ::paddle::framework::TableDependencyMap* CopyTableConfig::add_table_denpendency_map() {
  // @@protoc_insertion_point(field_add:paddle.framework.CopyTableConfig.table_denpendency_map)
  return table_denpendency_map_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableDependencyMap >*
CopyTableConfig::mutable_table_denpendency_map() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.CopyTableConfig.table_denpendency_map)
  return &table_denpendency_map_;
}
inline const ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableDependencyMap >&
CopyTableConfig::table_denpendency_map() const {
  // @@protoc_insertion_point(field_list:paddle.framework.CopyTableConfig.table_denpendency_map)
  return table_denpendency_map_;
}

inline const CopyTableConfig* CopyTableConfig::internal_default_instance() {
  return &CopyTableConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// CondTableMap

// required int32 key = 1;
inline bool CondTableMap::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CondTableMap::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CondTableMap::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CondTableMap::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 CondTableMap::key() const {
  // @@protoc_insertion_point(field_get:paddle.framework.CondTableMap.key)
  return key_;
}
inline void CondTableMap::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.CondTableMap.key)
}

// required int32 value = 2;
inline bool CondTableMap::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CondTableMap::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CondTableMap::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CondTableMap::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 CondTableMap::value() const {
  // @@protoc_insertion_point(field_get:paddle.framework.CondTableMap.value)
  return value_;
}
inline void CondTableMap::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.CondTableMap.value)
}

inline const CondTableMap* CondTableMap::internal_default_instance() {
  return &CondTableMap_default_instance_.get();
}
// -------------------------------------------------------------------

// ProgramConfig

// required string program_id = 1;
inline bool ProgramConfig::has_program_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProgramConfig::set_has_program_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProgramConfig::clear_has_program_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProgramConfig::clear_program_id() {
  program_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_program_id();
}
inline const ::std::string& ProgramConfig::program_id() const {
  // @@protoc_insertion_point(field_get:paddle.framework.ProgramConfig.program_id)
  return program_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProgramConfig::set_program_id(const ::std::string& value) {
  set_has_program_id();
  program_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:paddle.framework.ProgramConfig.program_id)
}
inline void ProgramConfig::set_program_id(const char* value) {
  set_has_program_id();
  program_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paddle.framework.ProgramConfig.program_id)
}
inline void ProgramConfig::set_program_id(const char* value, size_t size) {
  set_has_program_id();
  program_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.ProgramConfig.program_id)
}
inline ::std::string* ProgramConfig::mutable_program_id() {
  set_has_program_id();
  // @@protoc_insertion_point(field_mutable:paddle.framework.ProgramConfig.program_id)
  return program_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProgramConfig::release_program_id() {
  // @@protoc_insertion_point(field_release:paddle.framework.ProgramConfig.program_id)
  clear_has_program_id();
  return program_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProgramConfig::set_allocated_program_id(::std::string* program_id) {
  if (program_id != NULL) {
    set_has_program_id();
  } else {
    clear_has_program_id();
  }
  program_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), program_id);
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.ProgramConfig.program_id)
}

// repeated int32 push_sparse_table_id = 2;
inline int ProgramConfig::push_sparse_table_id_size() const {
  return push_sparse_table_id_.size();
}
inline void ProgramConfig::clear_push_sparse_table_id() {
  push_sparse_table_id_.Clear();
}
inline ::google::protobuf::int32 ProgramConfig::push_sparse_table_id(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.ProgramConfig.push_sparse_table_id)
  return push_sparse_table_id_.Get(index);
}
inline void ProgramConfig::set_push_sparse_table_id(int index, ::google::protobuf::int32 value) {
  push_sparse_table_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.ProgramConfig.push_sparse_table_id)
}
inline void ProgramConfig::add_push_sparse_table_id(::google::protobuf::int32 value) {
  push_sparse_table_id_.Add(value);
  // @@protoc_insertion_point(field_add:paddle.framework.ProgramConfig.push_sparse_table_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProgramConfig::push_sparse_table_id() const {
  // @@protoc_insertion_point(field_list:paddle.framework.ProgramConfig.push_sparse_table_id)
  return push_sparse_table_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProgramConfig::mutable_push_sparse_table_id() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.ProgramConfig.push_sparse_table_id)
  return &push_sparse_table_id_;
}

// repeated int32 push_dense_table_id = 3;
inline int ProgramConfig::push_dense_table_id_size() const {
  return push_dense_table_id_.size();
}
inline void ProgramConfig::clear_push_dense_table_id() {
  push_dense_table_id_.Clear();
}
inline ::google::protobuf::int32 ProgramConfig::push_dense_table_id(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.ProgramConfig.push_dense_table_id)
  return push_dense_table_id_.Get(index);
}
inline void ProgramConfig::set_push_dense_table_id(int index, ::google::protobuf::int32 value) {
  push_dense_table_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.ProgramConfig.push_dense_table_id)
}
inline void ProgramConfig::add_push_dense_table_id(::google::protobuf::int32 value) {
  push_dense_table_id_.Add(value);
  // @@protoc_insertion_point(field_add:paddle.framework.ProgramConfig.push_dense_table_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProgramConfig::push_dense_table_id() const {
  // @@protoc_insertion_point(field_list:paddle.framework.ProgramConfig.push_dense_table_id)
  return push_dense_table_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProgramConfig::mutable_push_dense_table_id() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.ProgramConfig.push_dense_table_id)
  return &push_dense_table_id_;
}

// repeated int32 pull_sparse_table_id = 4;
inline int ProgramConfig::pull_sparse_table_id_size() const {
  return pull_sparse_table_id_.size();
}
inline void ProgramConfig::clear_pull_sparse_table_id() {
  pull_sparse_table_id_.Clear();
}
inline ::google::protobuf::int32 ProgramConfig::pull_sparse_table_id(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.ProgramConfig.pull_sparse_table_id)
  return pull_sparse_table_id_.Get(index);
}
inline void ProgramConfig::set_pull_sparse_table_id(int index, ::google::protobuf::int32 value) {
  pull_sparse_table_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.ProgramConfig.pull_sparse_table_id)
}
inline void ProgramConfig::add_pull_sparse_table_id(::google::protobuf::int32 value) {
  pull_sparse_table_id_.Add(value);
  // @@protoc_insertion_point(field_add:paddle.framework.ProgramConfig.pull_sparse_table_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProgramConfig::pull_sparse_table_id() const {
  // @@protoc_insertion_point(field_list:paddle.framework.ProgramConfig.pull_sparse_table_id)
  return pull_sparse_table_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProgramConfig::mutable_pull_sparse_table_id() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.ProgramConfig.pull_sparse_table_id)
  return &pull_sparse_table_id_;
}

// repeated int32 pull_dense_table_id = 5;
inline int ProgramConfig::pull_dense_table_id_size() const {
  return pull_dense_table_id_.size();
}
inline void ProgramConfig::clear_pull_dense_table_id() {
  pull_dense_table_id_.Clear();
}
inline ::google::protobuf::int32 ProgramConfig::pull_dense_table_id(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.ProgramConfig.pull_dense_table_id)
  return pull_dense_table_id_.Get(index);
}
inline void ProgramConfig::set_pull_dense_table_id(int index, ::google::protobuf::int32 value) {
  pull_dense_table_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.ProgramConfig.pull_dense_table_id)
}
inline void ProgramConfig::add_pull_dense_table_id(::google::protobuf::int32 value) {
  pull_dense_table_id_.Add(value);
  // @@protoc_insertion_point(field_add:paddle.framework.ProgramConfig.pull_dense_table_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProgramConfig::pull_dense_table_id() const {
  // @@protoc_insertion_point(field_list:paddle.framework.ProgramConfig.pull_dense_table_id)
  return pull_dense_table_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProgramConfig::mutable_pull_dense_table_id() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.ProgramConfig.pull_dense_table_id)
  return &pull_dense_table_id_;
}

// repeated .paddle.framework.CondTableMap partial_pushdense_condtable_map = 10;
inline int ProgramConfig::partial_pushdense_condtable_map_size() const {
  return partial_pushdense_condtable_map_.size();
}
inline void ProgramConfig::clear_partial_pushdense_condtable_map() {
  partial_pushdense_condtable_map_.Clear();
}
inline const ::paddle::framework::CondTableMap& ProgramConfig::partial_pushdense_condtable_map(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.ProgramConfig.partial_pushdense_condtable_map)
  return partial_pushdense_condtable_map_.Get(index);
}
inline ::paddle::framework::CondTableMap* ProgramConfig::mutable_partial_pushdense_condtable_map(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.ProgramConfig.partial_pushdense_condtable_map)
  return partial_pushdense_condtable_map_.Mutable(index);
}
inline ::paddle::framework::CondTableMap* ProgramConfig::add_partial_pushdense_condtable_map() {
  // @@protoc_insertion_point(field_add:paddle.framework.ProgramConfig.partial_pushdense_condtable_map)
  return partial_pushdense_condtable_map_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::paddle::framework::CondTableMap >*
ProgramConfig::mutable_partial_pushdense_condtable_map() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.ProgramConfig.partial_pushdense_condtable_map)
  return &partial_pushdense_condtable_map_;
}
inline const ::google::protobuf::RepeatedPtrField< ::paddle::framework::CondTableMap >&
ProgramConfig::partial_pushdense_condtable_map() const {
  // @@protoc_insertion_point(field_list:paddle.framework.ProgramConfig.partial_pushdense_condtable_map)
  return partial_pushdense_condtable_map_;
}

inline const ProgramConfig* ProgramConfig::internal_default_instance() {
  return &ProgramConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// PullDenseWorkerParameter

// optional int32 threshold = 1 [default = 1];
inline bool PullDenseWorkerParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PullDenseWorkerParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PullDenseWorkerParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PullDenseWorkerParameter::clear_threshold() {
  threshold_ = 1;
  clear_has_threshold();
}
inline ::google::protobuf::int32 PullDenseWorkerParameter::threshold() const {
  // @@protoc_insertion_point(field_get:paddle.framework.PullDenseWorkerParameter.threshold)
  return threshold_;
}
inline void PullDenseWorkerParameter::set_threshold(::google::protobuf::int32 value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.PullDenseWorkerParameter.threshold)
}

// optional int32 device_num = 2;
inline bool PullDenseWorkerParameter::has_device_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PullDenseWorkerParameter::set_has_device_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PullDenseWorkerParameter::clear_has_device_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PullDenseWorkerParameter::clear_device_num() {
  device_num_ = 0;
  clear_has_device_num();
}
inline ::google::protobuf::int32 PullDenseWorkerParameter::device_num() const {
  // @@protoc_insertion_point(field_get:paddle.framework.PullDenseWorkerParameter.device_num)
  return device_num_;
}
inline void PullDenseWorkerParameter::set_device_num(::google::protobuf::int32 value) {
  set_has_device_num();
  device_num_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.PullDenseWorkerParameter.device_num)
}

// optional int32 sleep_time_ms = 3 [default = 2];
inline bool PullDenseWorkerParameter::has_sleep_time_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PullDenseWorkerParameter::set_has_sleep_time_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PullDenseWorkerParameter::clear_has_sleep_time_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PullDenseWorkerParameter::clear_sleep_time_ms() {
  sleep_time_ms_ = 2;
  clear_has_sleep_time_ms();
}
inline ::google::protobuf::int32 PullDenseWorkerParameter::sleep_time_ms() const {
  // @@protoc_insertion_point(field_get:paddle.framework.PullDenseWorkerParameter.sleep_time_ms)
  return sleep_time_ms_;
}
inline void PullDenseWorkerParameter::set_sleep_time_ms(::google::protobuf::int32 value) {
  set_has_sleep_time_ms();
  sleep_time_ms_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.PullDenseWorkerParameter.sleep_time_ms)
}

// repeated .paddle.framework.TableParameter dense_table = 4;
inline int PullDenseWorkerParameter::dense_table_size() const {
  return dense_table_.size();
}
inline void PullDenseWorkerParameter::clear_dense_table() {
  dense_table_.Clear();
}
inline const ::paddle::framework::TableParameter& PullDenseWorkerParameter::dense_table(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.PullDenseWorkerParameter.dense_table)
  return dense_table_.Get(index);
}
inline ::paddle::framework::TableParameter* PullDenseWorkerParameter::mutable_dense_table(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.PullDenseWorkerParameter.dense_table)
  return dense_table_.Mutable(index);
}
inline ::paddle::framework::TableParameter* PullDenseWorkerParameter::add_dense_table() {
  // @@protoc_insertion_point(field_add:paddle.framework.PullDenseWorkerParameter.dense_table)
  return dense_table_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableParameter >*
PullDenseWorkerParameter::mutable_dense_table() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.PullDenseWorkerParameter.dense_table)
  return &dense_table_;
}
inline const ::google::protobuf::RepeatedPtrField< ::paddle::framework::TableParameter >&
PullDenseWorkerParameter::dense_table() const {
  // @@protoc_insertion_point(field_list:paddle.framework.PullDenseWorkerParameter.dense_table)
  return dense_table_;
}

inline const PullDenseWorkerParameter* PullDenseWorkerParameter::internal_default_instance() {
  return &PullDenseWorkerParameter_default_instance_.get();
}
// -------------------------------------------------------------------

// TableParameter

// optional uint64 table_id = 1;
inline bool TableParameter::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableParameter::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableParameter::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableParameter::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
  clear_has_table_id();
}
inline ::google::protobuf::uint64 TableParameter::table_id() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TableParameter.table_id)
  return table_id_;
}
inline void TableParameter::set_table_id(::google::protobuf::uint64 value) {
  set_has_table_id();
  table_id_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TableParameter.table_id)
}

// repeated string dense_value_name = 2;
inline int TableParameter::dense_value_name_size() const {
  return dense_value_name_.size();
}
inline void TableParameter::clear_dense_value_name() {
  dense_value_name_.Clear();
}
inline const ::std::string& TableParameter::dense_value_name(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.TableParameter.dense_value_name)
  return dense_value_name_.Get(index);
}
inline ::std::string* TableParameter::mutable_dense_value_name(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.TableParameter.dense_value_name)
  return dense_value_name_.Mutable(index);
}
inline void TableParameter::set_dense_value_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.TableParameter.dense_value_name)
  dense_value_name_.Mutable(index)->assign(value);
}
inline void TableParameter::set_dense_value_name(int index, const char* value) {
  dense_value_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.TableParameter.dense_value_name)
}
inline void TableParameter::set_dense_value_name(int index, const char* value, size_t size) {
  dense_value_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TableParameter.dense_value_name)
}
inline ::std::string* TableParameter::add_dense_value_name() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.TableParameter.dense_value_name)
  return dense_value_name_.Add();
}
inline void TableParameter::add_dense_value_name(const ::std::string& value) {
  dense_value_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.TableParameter.dense_value_name)
}
inline void TableParameter::add_dense_value_name(const char* value) {
  dense_value_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.TableParameter.dense_value_name)
}
inline void TableParameter::add_dense_value_name(const char* value, size_t size) {
  dense_value_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.TableParameter.dense_value_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TableParameter::dense_value_name() const {
  // @@protoc_insertion_point(field_list:paddle.framework.TableParameter.dense_value_name)
  return dense_value_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TableParameter::mutable_dense_value_name() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.TableParameter.dense_value_name)
  return &dense_value_name_;
}

// repeated string dense_grad_name = 3;
inline int TableParameter::dense_grad_name_size() const {
  return dense_grad_name_.size();
}
inline void TableParameter::clear_dense_grad_name() {
  dense_grad_name_.Clear();
}
inline const ::std::string& TableParameter::dense_grad_name(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.TableParameter.dense_grad_name)
  return dense_grad_name_.Get(index);
}
inline ::std::string* TableParameter::mutable_dense_grad_name(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.TableParameter.dense_grad_name)
  return dense_grad_name_.Mutable(index);
}
inline void TableParameter::set_dense_grad_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.TableParameter.dense_grad_name)
  dense_grad_name_.Mutable(index)->assign(value);
}
inline void TableParameter::set_dense_grad_name(int index, const char* value) {
  dense_grad_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.TableParameter.dense_grad_name)
}
inline void TableParameter::set_dense_grad_name(int index, const char* value, size_t size) {
  dense_grad_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TableParameter.dense_grad_name)
}
inline ::std::string* TableParameter::add_dense_grad_name() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.TableParameter.dense_grad_name)
  return dense_grad_name_.Add();
}
inline void TableParameter::add_dense_grad_name(const ::std::string& value) {
  dense_grad_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.TableParameter.dense_grad_name)
}
inline void TableParameter::add_dense_grad_name(const char* value) {
  dense_grad_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.TableParameter.dense_grad_name)
}
inline void TableParameter::add_dense_grad_name(const char* value, size_t size) {
  dense_grad_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.TableParameter.dense_grad_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TableParameter::dense_grad_name() const {
  // @@protoc_insertion_point(field_list:paddle.framework.TableParameter.dense_grad_name)
  return dense_grad_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TableParameter::mutable_dense_grad_name() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.TableParameter.dense_grad_name)
  return &dense_grad_name_;
}

// repeated int32 push_dense_wait_times = 5;
inline int TableParameter::push_dense_wait_times_size() const {
  return push_dense_wait_times_.size();
}
inline void TableParameter::clear_push_dense_wait_times() {
  push_dense_wait_times_.Clear();
}
inline ::google::protobuf::int32 TableParameter::push_dense_wait_times(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.TableParameter.push_dense_wait_times)
  return push_dense_wait_times_.Get(index);
}
inline void TableParameter::set_push_dense_wait_times(int index, ::google::protobuf::int32 value) {
  push_dense_wait_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.TableParameter.push_dense_wait_times)
}
inline void TableParameter::add_push_dense_wait_times(::google::protobuf::int32 value) {
  push_dense_wait_times_.Add(value);
  // @@protoc_insertion_point(field_add:paddle.framework.TableParameter.push_dense_wait_times)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TableParameter::push_dense_wait_times() const {
  // @@protoc_insertion_point(field_list:paddle.framework.TableParameter.push_dense_wait_times)
  return push_dense_wait_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TableParameter::mutable_push_dense_wait_times() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.TableParameter.push_dense_wait_times)
  return &push_dense_wait_times_;
}

// repeated string sparse_key_name = 6;
inline int TableParameter::sparse_key_name_size() const {
  return sparse_key_name_.size();
}
inline void TableParameter::clear_sparse_key_name() {
  sparse_key_name_.Clear();
}
inline const ::std::string& TableParameter::sparse_key_name(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.TableParameter.sparse_key_name)
  return sparse_key_name_.Get(index);
}
inline ::std::string* TableParameter::mutable_sparse_key_name(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.TableParameter.sparse_key_name)
  return sparse_key_name_.Mutable(index);
}
inline void TableParameter::set_sparse_key_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.TableParameter.sparse_key_name)
  sparse_key_name_.Mutable(index)->assign(value);
}
inline void TableParameter::set_sparse_key_name(int index, const char* value) {
  sparse_key_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.TableParameter.sparse_key_name)
}
inline void TableParameter::set_sparse_key_name(int index, const char* value, size_t size) {
  sparse_key_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TableParameter.sparse_key_name)
}
inline ::std::string* TableParameter::add_sparse_key_name() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.TableParameter.sparse_key_name)
  return sparse_key_name_.Add();
}
inline void TableParameter::add_sparse_key_name(const ::std::string& value) {
  sparse_key_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.TableParameter.sparse_key_name)
}
inline void TableParameter::add_sparse_key_name(const char* value) {
  sparse_key_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.TableParameter.sparse_key_name)
}
inline void TableParameter::add_sparse_key_name(const char* value, size_t size) {
  sparse_key_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.TableParameter.sparse_key_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TableParameter::sparse_key_name() const {
  // @@protoc_insertion_point(field_list:paddle.framework.TableParameter.sparse_key_name)
  return sparse_key_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TableParameter::mutable_sparse_key_name() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.TableParameter.sparse_key_name)
  return &sparse_key_name_;
}

// repeated string sparse_value_name = 7;
inline int TableParameter::sparse_value_name_size() const {
  return sparse_value_name_.size();
}
inline void TableParameter::clear_sparse_value_name() {
  sparse_value_name_.Clear();
}
inline const ::std::string& TableParameter::sparse_value_name(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.TableParameter.sparse_value_name)
  return sparse_value_name_.Get(index);
}
inline ::std::string* TableParameter::mutable_sparse_value_name(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.TableParameter.sparse_value_name)
  return sparse_value_name_.Mutable(index);
}
inline void TableParameter::set_sparse_value_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.TableParameter.sparse_value_name)
  sparse_value_name_.Mutable(index)->assign(value);
}
inline void TableParameter::set_sparse_value_name(int index, const char* value) {
  sparse_value_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.TableParameter.sparse_value_name)
}
inline void TableParameter::set_sparse_value_name(int index, const char* value, size_t size) {
  sparse_value_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TableParameter.sparse_value_name)
}
inline ::std::string* TableParameter::add_sparse_value_name() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.TableParameter.sparse_value_name)
  return sparse_value_name_.Add();
}
inline void TableParameter::add_sparse_value_name(const ::std::string& value) {
  sparse_value_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.TableParameter.sparse_value_name)
}
inline void TableParameter::add_sparse_value_name(const char* value) {
  sparse_value_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.TableParameter.sparse_value_name)
}
inline void TableParameter::add_sparse_value_name(const char* value, size_t size) {
  sparse_value_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.TableParameter.sparse_value_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TableParameter::sparse_value_name() const {
  // @@protoc_insertion_point(field_list:paddle.framework.TableParameter.sparse_value_name)
  return sparse_value_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TableParameter::mutable_sparse_value_name() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.TableParameter.sparse_value_name)
  return &sparse_value_name_;
}

// repeated string sparse_grad_name = 8;
inline int TableParameter::sparse_grad_name_size() const {
  return sparse_grad_name_.size();
}
inline void TableParameter::clear_sparse_grad_name() {
  sparse_grad_name_.Clear();
}
inline const ::std::string& TableParameter::sparse_grad_name(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.TableParameter.sparse_grad_name)
  return sparse_grad_name_.Get(index);
}
inline ::std::string* TableParameter::mutable_sparse_grad_name(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.TableParameter.sparse_grad_name)
  return sparse_grad_name_.Mutable(index);
}
inline void TableParameter::set_sparse_grad_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.TableParameter.sparse_grad_name)
  sparse_grad_name_.Mutable(index)->assign(value);
}
inline void TableParameter::set_sparse_grad_name(int index, const char* value) {
  sparse_grad_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.TableParameter.sparse_grad_name)
}
inline void TableParameter::set_sparse_grad_name(int index, const char* value, size_t size) {
  sparse_grad_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TableParameter.sparse_grad_name)
}
inline ::std::string* TableParameter::add_sparse_grad_name() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.TableParameter.sparse_grad_name)
  return sparse_grad_name_.Add();
}
inline void TableParameter::add_sparse_grad_name(const ::std::string& value) {
  sparse_grad_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.TableParameter.sparse_grad_name)
}
inline void TableParameter::add_sparse_grad_name(const char* value) {
  sparse_grad_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.TableParameter.sparse_grad_name)
}
inline void TableParameter::add_sparse_grad_name(const char* value, size_t size) {
  sparse_grad_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.TableParameter.sparse_grad_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TableParameter::sparse_grad_name() const {
  // @@protoc_insertion_point(field_list:paddle.framework.TableParameter.sparse_grad_name)
  return sparse_grad_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TableParameter::mutable_sparse_grad_name() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.TableParameter.sparse_grad_name)
  return &sparse_grad_name_;
}

// repeated int32 push_sparse_wait_times = 9;
inline int TableParameter::push_sparse_wait_times_size() const {
  return push_sparse_wait_times_.size();
}
inline void TableParameter::clear_push_sparse_wait_times() {
  push_sparse_wait_times_.Clear();
}
inline ::google::protobuf::int32 TableParameter::push_sparse_wait_times(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.TableParameter.push_sparse_wait_times)
  return push_sparse_wait_times_.Get(index);
}
inline void TableParameter::set_push_sparse_wait_times(int index, ::google::protobuf::int32 value) {
  push_sparse_wait_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.TableParameter.push_sparse_wait_times)
}
inline void TableParameter::add_push_sparse_wait_times(::google::protobuf::int32 value) {
  push_sparse_wait_times_.Add(value);
  // @@protoc_insertion_point(field_add:paddle.framework.TableParameter.push_sparse_wait_times)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TableParameter::push_sparse_wait_times() const {
  // @@protoc_insertion_point(field_list:paddle.framework.TableParameter.push_sparse_wait_times)
  return push_sparse_wait_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TableParameter::mutable_push_sparse_wait_times() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.TableParameter.push_sparse_wait_times)
  return &push_sparse_wait_times_;
}

// optional int32 emb_dim = 10;
inline bool TableParameter::has_emb_dim() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TableParameter::set_has_emb_dim() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TableParameter::clear_has_emb_dim() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TableParameter::clear_emb_dim() {
  emb_dim_ = 0;
  clear_has_emb_dim();
}
inline ::google::protobuf::int32 TableParameter::emb_dim() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TableParameter.emb_dim)
  return emb_dim_;
}
inline void TableParameter::set_emb_dim(::google::protobuf::int32 value) {
  set_has_emb_dim();
  emb_dim_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TableParameter.emb_dim)
}

// optional int32 fea_dim = 11;
inline bool TableParameter::has_fea_dim() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TableParameter::set_has_fea_dim() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TableParameter::clear_has_fea_dim() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TableParameter::clear_fea_dim() {
  fea_dim_ = 0;
  clear_has_fea_dim();
}
inline ::google::protobuf::int32 TableParameter::fea_dim() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TableParameter.fea_dim)
  return fea_dim_;
}
inline void TableParameter::set_fea_dim(::google::protobuf::int32 value) {
  set_has_fea_dim();
  fea_dim_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TableParameter.fea_dim)
}

// optional string label_var_name = 12;
inline bool TableParameter::has_label_var_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TableParameter::set_has_label_var_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TableParameter::clear_has_label_var_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TableParameter::clear_label_var_name() {
  label_var_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label_var_name();
}
inline const ::std::string& TableParameter::label_var_name() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TableParameter.label_var_name)
  return label_var_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableParameter::set_label_var_name(const ::std::string& value) {
  set_has_label_var_name();
  label_var_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:paddle.framework.TableParameter.label_var_name)
}
inline void TableParameter::set_label_var_name(const char* value) {
  set_has_label_var_name();
  label_var_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paddle.framework.TableParameter.label_var_name)
}
inline void TableParameter::set_label_var_name(const char* value, size_t size) {
  set_has_label_var_name();
  label_var_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TableParameter.label_var_name)
}
inline ::std::string* TableParameter::mutable_label_var_name() {
  set_has_label_var_name();
  // @@protoc_insertion_point(field_mutable:paddle.framework.TableParameter.label_var_name)
  return label_var_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableParameter::release_label_var_name() {
  // @@protoc_insertion_point(field_release:paddle.framework.TableParameter.label_var_name)
  clear_has_label_var_name();
  return label_var_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableParameter::set_allocated_label_var_name(::std::string* label_var_name) {
  if (label_var_name != NULL) {
    set_has_label_var_name();
  } else {
    clear_has_label_var_name();
  }
  label_var_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_var_name);
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.TableParameter.label_var_name)
}

// optional bool is_local = 13 [default = false];
inline bool TableParameter::has_is_local() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TableParameter::set_has_is_local() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TableParameter::clear_has_is_local() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TableParameter::clear_is_local() {
  is_local_ = false;
  clear_has_is_local();
}
inline bool TableParameter::is_local() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TableParameter.is_local)
  return is_local_;
}
inline void TableParameter::set_is_local(bool value) {
  set_has_is_local();
  is_local_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TableParameter.is_local)
}

// optional bool is_async = 14 [default = false];
inline bool TableParameter::has_is_async() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TableParameter::set_has_is_async() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TableParameter::clear_has_is_async() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TableParameter::clear_is_async() {
  is_async_ = false;
  clear_has_is_async();
}
inline bool TableParameter::is_async() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TableParameter.is_async)
  return is_async_;
}
inline void TableParameter::set_is_async(bool value) {
  set_has_is_async();
  is_async_ = value;
  // @@protoc_insertion_point(field_set:paddle.framework.TableParameter.is_async)
}

// optional string async_wait_op_name = 15;
inline bool TableParameter::has_async_wait_op_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TableParameter::set_has_async_wait_op_name() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TableParameter::clear_has_async_wait_op_name() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TableParameter::clear_async_wait_op_name() {
  async_wait_op_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_async_wait_op_name();
}
inline const ::std::string& TableParameter::async_wait_op_name() const {
  // @@protoc_insertion_point(field_get:paddle.framework.TableParameter.async_wait_op_name)
  return async_wait_op_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableParameter::set_async_wait_op_name(const ::std::string& value) {
  set_has_async_wait_op_name();
  async_wait_op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:paddle.framework.TableParameter.async_wait_op_name)
}
inline void TableParameter::set_async_wait_op_name(const char* value) {
  set_has_async_wait_op_name();
  async_wait_op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:paddle.framework.TableParameter.async_wait_op_name)
}
inline void TableParameter::set_async_wait_op_name(const char* value, size_t size) {
  set_has_async_wait_op_name();
  async_wait_op_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.TableParameter.async_wait_op_name)
}
inline ::std::string* TableParameter::mutable_async_wait_op_name() {
  set_has_async_wait_op_name();
  // @@protoc_insertion_point(field_mutable:paddle.framework.TableParameter.async_wait_op_name)
  return async_wait_op_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableParameter::release_async_wait_op_name() {
  // @@protoc_insertion_point(field_release:paddle.framework.TableParameter.async_wait_op_name)
  clear_has_async_wait_op_name();
  return async_wait_op_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableParameter::set_allocated_async_wait_op_name(::std::string* async_wait_op_name) {
  if (async_wait_op_name != NULL) {
    set_has_async_wait_op_name();
  } else {
    clear_has_async_wait_op_name();
  }
  async_wait_op_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), async_wait_op_name);
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.TableParameter.async_wait_op_name)
}

inline const TableParameter* TableParameter::internal_default_instance() {
  return &TableParameter_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace framework
}  // namespace paddle

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::paddle::framework::SectionConfig_Place> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::paddle::framework::FetchConfig_Method> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_trainer_5fdesc_2eproto__INCLUDED
